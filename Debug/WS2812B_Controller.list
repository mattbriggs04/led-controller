
WS2812B_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000490c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a94  08004a94  00005a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004acc  08004acc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004acc  08004acc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004acc  08004acc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004acc  08004acc  00005acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ad0  08004ad0  00005ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004ad4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000138  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e4e9  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f99  00000000  00000000  00014525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  000164c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f6  00000000  00000000  00017170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abae  00000000  00000000  00017b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbb8  00000000  00000000  00032714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0f34  00000000  00000000  000422cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e3200  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000352c  00000000  00000000  000e3244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000e6770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a7c 	.word	0x08004a7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a7c 	.word	0x08004a7c

080001c8 <check_color_bounds>:
 *      Author: matthew
 */
#include "main.h"
#include "led_controller.h"

static void check_color_bounds(int* green, int* red, int* blue) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	if(*green > 255) *green = 255;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2bff      	cmp	r3, #255	@ 0xff
 80001da:	dd03      	ble.n	80001e4 <check_color_bounds+0x1c>
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	22ff      	movs	r2, #255	@ 0xff
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	e006      	b.n	80001f2 <check_color_bounds+0x2a>
	else if (*green < 0) *green = 0;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da02      	bge.n	80001f2 <check_color_bounds+0x2a>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]

	if(*red > 255) *red = 255;
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2bff      	cmp	r3, #255	@ 0xff
 80001f8:	dd03      	ble.n	8000202 <check_color_bounds+0x3a>
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	22ff      	movs	r2, #255	@ 0xff
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e006      	b.n	8000210 <check_color_bounds+0x48>
	else if (*red < 0) *red = 0;
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	da02      	bge.n	8000210 <check_color_bounds+0x48>
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]

	if(*blue > 255) *blue = 255;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2bff      	cmp	r3, #255	@ 0xff
 8000216:	dd03      	ble.n	8000220 <check_color_bounds+0x58>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	22ff      	movs	r2, #255	@ 0xff
 800021c:	601a      	str	r2, [r3, #0]
	else if (*blue < 0) *blue = 0;
}
 800021e:	e006      	b.n	800022e <check_color_bounds+0x66>
	else if (*blue < 0) *blue = 0;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	da02      	bge.n	800022e <check_color_bounds+0x66>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <set_color>:

static void set_color(int green, int red, int blue, int led_idx, int led_colors[NUM_LEDS][3]) {
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	603b      	str	r3, [r7, #0]
	// Verify all color values are between 0 and 255 and led_num is in bounds
	check_color_bounds(&green, &red, &blue);
 8000248:	1d3a      	adds	r2, r7, #4
 800024a:	f107 0108 	add.w	r1, r7, #8
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffb8 	bl	80001c8 <check_color_bounds>
	if (led_idx > NUM_LEDS - 1) {
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2b3b      	cmp	r3, #59	@ 0x3b
 800025c:	dd01      	ble.n	8000262 <set_color+0x28>
		led_idx = NUM_LEDS - 1;
 800025e:	233b      	movs	r3, #59	@ 0x3b
 8000260:	603b      	str	r3, [r7, #0]
	}

	led_colors[led_idx][0] = green;
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	4413      	add	r3, r2
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	461a      	mov	r2, r3
 800026e:	69bb      	ldr	r3, [r7, #24]
 8000270:	4413      	add	r3, r2
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]
	led_colors[led_idx][1] = red;
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	4613      	mov	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4413      	add	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	461a      	mov	r2, r3
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	4413      	add	r3, r2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	605a      	str	r2, [r3, #4]
	led_colors[led_idx][2] = blue;
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4413      	add	r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	461a      	mov	r2, r3
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	4413      	add	r3, r2
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <send_data>:

static void send_data(int led_colors[NUM_LEDS][3]) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	f5ad 6d3c 	sub.w	sp, sp, #3008	@ 0xbc0
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002b4:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 80002b8:	6018      	str	r0, [r3, #0]
	uint16_t pwm_data[(DATA_SIZE * NUM_LEDS) + RST_CODE_LENGTH];
	// each color is 3 bytes = 24 bits (Green byte | Red byte | Blue byte for WS2812b)
	uint32_t color = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 3bac 	str.w	r3, [r7, #2988]	@ 0xbac
	int running_idx = 0; // accumulating index to continually add to pwm_data
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc

	for(int j = 0; j < NUM_LEDS; j++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8c7 3bb8 	str.w	r3, [r7, #3000]	@ 0xbb8
 80002cc:	e064      	b.n	8000398 <send_data+0xf0>
		// create GRB color from each byte of led_colors
		color = (led_colors[j][0] << 16) | (led_colors[j][1] << 8) | (led_colors[j][2]);
 80002ce:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 80002d2:	4613      	mov	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	4413      	add	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	461a      	mov	r2, r3
 80002dc:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002e0:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	0419      	lsls	r1, r3, #16
 80002ec:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	461a      	mov	r2, r3
 80002fa:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002fe:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4413      	add	r3, r2
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	4319      	orrs	r1, r3
 800030c:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 8000310:	4613      	mov	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	4413      	add	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	461a      	mov	r2, r3
 800031a:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 800031e:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4413      	add	r3, r2
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	430b      	orrs	r3, r1
 800032a:	f8c7 3bac 	str.w	r3, [r7, #2988]	@ 0xbac

		// Put a code 1 into pwm stream if bit = 1, and code 0 if bit = 0
		for(int i = DATA_SIZE - 1; i >= 0; i--) {
 800032e:	2317      	movs	r3, #23
 8000330:	f8c7 3bb4 	str.w	r3, [r7, #2996]	@ 0xbb4
 8000334:	e027      	b.n	8000386 <send_data+0xde>
			if(color & (1 << i)) {
 8000336:	2201      	movs	r2, #1
 8000338:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	461a      	mov	r2, r3
 8000342:	f8d7 3bac 	ldr.w	r3, [r7, #2988]	@ 0xbac
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d009      	beq.n	8000360 <send_data+0xb8>
				pwm_data[running_idx] = CODE_1_COMPARE;
 800034c:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000350:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8000354:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8000358:	2133      	movs	r1, #51	@ 0x33
 800035a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800035e:	e008      	b.n	8000372 <send_data+0xca>
			}
			else {
				pwm_data[running_idx] = CODE_0_COMPARE;
 8000360:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000364:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8000368:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 800036c:	211a      	movs	r1, #26
 800036e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			running_idx++;
 8000372:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 8000376:	3301      	adds	r3, #1
 8000378:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc
		for(int i = DATA_SIZE - 1; i >= 0; i--) {
 800037c:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 8000380:	3b01      	subs	r3, #1
 8000382:	f8c7 3bb4 	str.w	r3, [r7, #2996]	@ 0xbb4
 8000386:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800038a:	2b00      	cmp	r3, #0
 800038c:	dad3      	bge.n	8000336 <send_data+0x8e>
	for(int j = 0; j < NUM_LEDS; j++) {
 800038e:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 8000392:	3301      	adds	r3, #1
 8000394:	f8c7 3bb8 	str.w	r3, [r7, #3000]	@ 0xbb8
 8000398:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 800039c:	2b3b      	cmp	r3, #59	@ 0x3b
 800039e:	dd96      	ble.n	80002ce <send_data+0x26>
		}
	}

	// Ensure the reset code is implemented -> should go low for > 50us
	for(int i = 0; i < RST_CODE_LENGTH; i++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	f8c7 3bb0 	str.w	r3, [r7, #2992]	@ 0xbb0
 80003a6:	e012      	b.n	80003ce <send_data+0x126>
		pwm_data[running_idx] = 0;
 80003a8:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80003ac:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 80003b0:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 80003b4:	2100      	movs	r1, #0
 80003b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		running_idx++;
 80003ba:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 80003be:	3301      	adds	r3, #1
 80003c0:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc
	for(int i = 0; i < RST_CODE_LENGTH; i++) {
 80003c4:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 80003c8:	3301      	adds	r3, #1
 80003ca:	f8c7 3bb0 	str.w	r3, [r7, #2992]	@ 0xbb0
 80003ce:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 80003d2:	2b31      	cmp	r3, #49	@ 0x31
 80003d4:	dde8      	ble.n	80003a8 <send_data+0x100>
	}

	// Start the DMA
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) pwm_data, DATA_SIZE * NUM_LEDS + RST_CODE_LENGTH);
 80003d6:	f107 0208 	add.w	r2, r7, #8
 80003da:	f240 53d2 	movw	r3, #1490	@ 0x5d2
 80003de:	2104      	movs	r1, #4
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <send_data+0x148>)
 80003e2:	f002 fddd 	bl	8002fa0 <HAL_TIM_PWM_Start_DMA>
}
 80003e6:	bf00      	nop
 80003e8:	f507 673c 	add.w	r7, r7, #3008	@ 0xbc0
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028

080003f4 <reset_led>:

// reset, startup animation (confirms LEDs are working)
void reset_led() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	f5ad 7d38 	sub.w	sp, sp, #736	@ 0x2e0
 80003fa:	af02      	add	r7, sp, #8
	int led_colors[NUM_LEDS][3] = {0};
 80003fc:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8000400:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8000404:	4618      	mov	r0, r3
 8000406:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 800040a:	461a      	mov	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 fb08 	bl	8004a22 <memset>

	for(int i = 0; i < NUM_LEDS; i++) {
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8000418:	e00d      	b.n	8000436 <reset_led+0x42>
		set_color(0, 0, 0, i, led_colors);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff ff07 	bl	800023a <set_color>
	for(int i = 0; i < NUM_LEDS; i++) {
 800042c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8000430:	3301      	adds	r3, #1
 8000432:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8000436:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800043a:	2b3b      	cmp	r3, #59	@ 0x3b
 800043c:	dded      	ble.n	800041a <reset_led+0x26>
	}
	send_data(led_colors);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff31 	bl	80002a8 <send_data>
}
 8000446:	bf00      	nop
 8000448:	f507 7736 	add.w	r7, r7, #728	@ 0x2d8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <startup_led>:

void startup_led() {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	fx_led_chaser(255, 255, 255, 15);
 8000454:	230f      	movs	r3, #15
 8000456:	22ff      	movs	r2, #255	@ 0xff
 8000458:	21ff      	movs	r1, #255	@ 0xff
 800045a:	20ff      	movs	r0, #255	@ 0xff
 800045c:	f000 f807 	bl	800046e <fx_led_chaser>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fd23 	bl	8000eac <HAL_Delay>
	reset_led(); // turn LEDs off
 8000466:	f7ff ffc5 	bl	80003f4 <reset_led>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}

0800046e <fx_led_chaser>:

// Effects functions

// Creates a snake of LEDs that go forward and back along the LEDs
void fx_led_chaser(int g, int r, int b, int speed) {
 800046e:	b590      	push	{r4, r7, lr}
 8000470:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8000474:	af02      	add	r7, sp, #8
 8000476:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 800047a:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 800047e:	6020      	str	r0, [r4, #0]
 8000480:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8000484:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 8000488:	6001      	str	r1, [r0, #0]
 800048a:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 800048e:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 8000492:	600a      	str	r2, [r1, #0]
 8000494:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8000498:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 800049c:	6013      	str	r3, [r2, #0]
	int led_colors[NUM_LEDS][3] = {0};
 800049e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004a2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80004a6:	4618      	mov	r0, r3
 80004a8:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 80004ac:	461a      	mov	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f004 fab7 	bl	8004a22 <memset>


	for(int i = 0; i < NUM_LEDS; i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80004ba:	e038      	b.n	800052e <fx_led_chaser+0xc0>
		set_color(g, r, b, i, led_colors);
 80004bc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004c0:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 80004c4:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004c8:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 80004cc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004d0:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	6809      	ldr	r1, [r1, #0]
 80004e2:	6800      	ldr	r0, [r0, #0]
 80004e4:	f7ff fea9 	bl	800023a <set_color>
		if(i >= 10) {
 80004e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	dd0c      	ble.n	800050a <fx_led_chaser+0x9c>
			set_color(0, 0, 0, i - 10, led_colors);
 80004f0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004f4:	f1a3 020a 	sub.w	r2, r3, #10
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	4613      	mov	r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff fe98 	bl	800023a <set_color>
		}
		send_data(led_colors);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff feca 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 8000514:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000518:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fcc4 	bl	8000eac <HAL_Delay>
	for(int i = 0; i < NUM_LEDS; i++) {
 8000524:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000528:	3301      	adds	r3, #1
 800052a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800052e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000532:	2b3b      	cmp	r3, #59	@ 0x3b
 8000534:	ddc2      	ble.n	80004bc <fx_led_chaser+0x4e>
	}
	for(int i = NUM_LEDS - 10; i >= 0; i--) {
 8000536:	2332      	movs	r3, #50	@ 0x32
 8000538:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800053c:	e038      	b.n	80005b0 <fx_led_chaser+0x142>
		set_color(g, r, b, i, led_colors);
 800053e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000542:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 8000546:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800054a:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 800054e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000552:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	6809      	ldr	r1, [r1, #0]
 8000564:	6800      	ldr	r0, [r0, #0]
 8000566:	f7ff fe68 	bl	800023a <set_color>
		if(i < NUM_LEDS - 10) {
 800056a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800056e:	2b31      	cmp	r3, #49	@ 0x31
 8000570:	dc0c      	bgt.n	800058c <fx_led_chaser+0x11e>
			set_color(0, 0, 0, i + 10, led_colors);
 8000572:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8000576:	f103 020a 	add.w	r2, r3, #10
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4613      	mov	r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe57 	bl	800023a <set_color>
		}
		send_data(led_colors);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe89 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 8000596:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800059a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc83 	bl	8000eac <HAL_Delay>
	for(int i = NUM_LEDS - 10; i >= 0; i--) {
 80005a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80005aa:	3b01      	subs	r3, #1
 80005ac:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80005b0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dac2      	bge.n	800053e <fx_led_chaser+0xd0>
	}
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <fx_change_color>:

// Change color of all LEDs
void fx_change_color(int g, int r, int b) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	f5ad 7d3c 	sub.w	sp, sp, #752	@ 0x2f0
 80005ca:	af02      	add	r7, sp, #8
 80005cc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80005d0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80005da:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80005de:	6019      	str	r1, [r3, #0]
 80005e0:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80005e4:	f5a3 7339 	sub.w	r3, r3, #740	@ 0x2e4
 80005e8:	601a      	str	r2, [r3, #0]
	int led_colors[NUM_LEDS][3] = {0};
 80005ea:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80005ee:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 80005f2:	4618      	mov	r0, r3
 80005f4:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 80005f8:	461a      	mov	r2, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	f004 fa11 	bl	8004a22 <memset>
	for(int i = 0; i < NUM_LEDS; i++) {
 8000600:	2300      	movs	r3, #0
 8000602:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8000606:	e01a      	b.n	800063e <fx_change_color+0x7a>
		set_color(g, r, b, i, led_colors);
 8000608:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800060c:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 8000610:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000614:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 8000618:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800061c:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	6809      	ldr	r1, [r1, #0]
 800062e:	6800      	ldr	r0, [r0, #0]
 8000630:	f7ff fe03 	bl	800023a <set_color>
	for(int i = 0; i < NUM_LEDS; i++) {
 8000634:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000638:	3301      	adds	r3, #1
 800063a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800063e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000642:	2b3b      	cmp	r3, #59	@ 0x3b
 8000644:	dde0      	ble.n	8000608 <fx_change_color+0x44>
	}
	send_data(led_colors);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe2c 	bl	80002a8 <send_data>
}
 8000650:	bf00      	nop
 8000652:	f507 773a 	add.w	r7, r7, #744	@ 0x2e8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <fx_build>:

// "builds" all LEDs on, one at a time at speed (in ms) from the start
void fx_build(int g, int r, int b, int speed) {
 800065a:	b590      	push	{r4, r7, lr}
 800065c:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8000660:	af02      	add	r7, sp, #8
 8000662:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 8000666:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 800066a:	6020      	str	r0, [r4, #0]
 800066c:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8000670:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 8000674:	6001      	str	r1, [r0, #0]
 8000676:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 800067a:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 800067e:	600a      	str	r2, [r1, #0]
 8000680:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8000684:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 8000688:	6013      	str	r3, [r2, #0]
	int led_colors[NUM_LEDS][3] = {0};
 800068a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800068e:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8000692:	4618      	mov	r0, r3
 8000694:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8000698:	461a      	mov	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f004 f9c1 	bl	8004a22 <memset>

	for(int i = 0; i < NUM_LEDS; i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80006a6:	e027      	b.n	80006f8 <fx_build+0x9e>
		set_color(g, r, b, i, led_colors);
 80006a8:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80006ac:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 80006b0:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80006b4:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 80006b8:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80006bc:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80006ca:	6812      	ldr	r2, [r2, #0]
 80006cc:	6809      	ldr	r1, [r1, #0]
 80006ce:	6800      	ldr	r0, [r0, #0]
 80006d0:	f7ff fdb3 	bl	800023a <set_color>
		send_data(led_colors);
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fde5 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 80006de:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80006e2:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fbdf 	bl	8000eac <HAL_Delay>
	for(int i = 0; i < NUM_LEDS; i++) {
 80006ee:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80006f2:	3301      	adds	r3, #1
 80006f4:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80006f8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80006fc:	2b3b      	cmp	r3, #59	@ 0x3b
 80006fe:	ddd3      	ble.n	80006a8 <fx_build+0x4e>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 8000708:	46bd      	mov	sp, r7
 800070a:	bd90      	pop	{r4, r7, pc}

0800070c <fx_build_inverted>:

// "builds" all LEDs on, starting from the last LED at speed (in ms)
void fx_build_inverted(int g, int r, int b, int speed) {
 800070c:	b590      	push	{r4, r7, lr}
 800070e:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8000712:	af02      	add	r7, sp, #8
 8000714:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 8000718:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 800071c:	6020      	str	r0, [r4, #0]
 800071e:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8000722:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 8000726:	6001      	str	r1, [r0, #0]
 8000728:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 800072c:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 8000730:	600a      	str	r2, [r1, #0]
 8000732:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8000736:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 800073a:	6013      	str	r3, [r2, #0]
	int led_colors[NUM_LEDS][3] = {0};
 800073c:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000740:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8000744:	4618      	mov	r0, r3
 8000746:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 800074a:	461a      	mov	r2, r3
 800074c:	2100      	movs	r1, #0
 800074e:	f004 f968 	bl	8004a22 <memset>

	for(int i = NUM_LEDS - 1; i >= 0; i--) {
 8000752:	233b      	movs	r3, #59	@ 0x3b
 8000754:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8000758:	e027      	b.n	80007aa <fx_build_inverted+0x9e>
		set_color(g, r, b, i, led_colors);
 800075a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800075e:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 8000762:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000766:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 800076a:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800076e:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	6809      	ldr	r1, [r1, #0]
 8000780:	6800      	ldr	r0, [r0, #0]
 8000782:	f7ff fd5a 	bl	800023a <set_color>
		send_data(led_colors);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd8c 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 8000790:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000794:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fb86 	bl	8000eac <HAL_Delay>
	for(int i = NUM_LEDS - 1; i >= 0; i--) {
 80007a0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80007a4:	3b01      	subs	r3, #1
 80007a6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80007aa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	dad3      	bge.n	800075a <fx_build_inverted+0x4e>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd90      	pop	{r4, r7, pc}

080007be <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fb0d 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f82d 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 f97f 	bl	8000acc <MX_GPIO_Init>
  MX_DMA_Init();
 80007ce:	f000 f95f 	bl	8000a90 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007d2:	f000 f92d 	bl	8000a30 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007d6:	f000 f87f 	bl	80008d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80007da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007de:	f000 fb65 	bl	8000eac <HAL_Delay>
  startup_led();
 80007e2:	f7ff fe35 	bl	8000450 <startup_led>
  HAL_Delay(1500);
 80007e6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80007ea:	f000 fb5f 	bl	8000eac <HAL_Delay>
  fx_change_color(255, 255, 255);
 80007ee:	22ff      	movs	r2, #255	@ 0xff
 80007f0:	21ff      	movs	r1, #255	@ 0xff
 80007f2:	20ff      	movs	r0, #255	@ 0xff
 80007f4:	f7ff fee6 	bl	80005c4 <fx_change_color>
  HAL_Delay(1000);
 80007f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007fc:	f000 fb56 	bl	8000eac <HAL_Delay>
  reset_led();
 8000800:	f7ff fdf8 	bl	80003f4 <reset_led>
  fx_build(255, 255, 255, 15);
 8000804:	230f      	movs	r3, #15
 8000806:	22ff      	movs	r2, #255	@ 0xff
 8000808:	21ff      	movs	r1, #255	@ 0xff
 800080a:	20ff      	movs	r0, #255	@ 0xff
 800080c:	f7ff ff25 	bl	800065a <fx_build>
  reset_led();
 8000810:	f7ff fdf0 	bl	80003f4 <reset_led>
  fx_build_inverted(255, 255, 255, 15);
 8000814:	230f      	movs	r3, #15
 8000816:	22ff      	movs	r2, #255	@ 0xff
 8000818:	21ff      	movs	r1, #255	@ 0xff
 800081a:	20ff      	movs	r0, #255	@ 0xff
 800081c:	f7ff ff76 	bl	800070c <fx_build_inverted>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <main+0x62>

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	@ 0x58
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800082e:	2228      	movs	r2, #40	@ 0x28
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f004 f8f5 	bl	8004a22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000858:	2302      	movs	r3, #2
 800085a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000860:	2310      	movs	r3, #16
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000864:	2302      	movs	r3, #2
 8000866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800086c:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000870:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000876:	4618      	mov	r0, r3
 8000878:	f000 ff56 	bl	8001728 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000882:	f000 f947 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2102      	movs	r1, #2
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 ff7e 	bl	80027a4 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008ae:	f000 f931 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80008b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f990 	bl	8002be4 <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008ca:	f000 f923 	bl	8000b14 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3758      	adds	r7, #88	@ 0x58
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b09a      	sub	sp, #104	@ 0x68
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
 8000908:	615a      	str	r2, [r3, #20]
 800090a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	222c      	movs	r2, #44	@ 0x2c
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f004 f885 	bl	8004a22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000918:	4b43      	ldr	r3, [pc, #268]	@ (8000a28 <MX_TIM1_Init+0x150>)
 800091a:	4a44      	ldr	r2, [pc, #272]	@ (8000a2c <MX_TIM1_Init+0x154>)
 800091c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800091e:	4b42      	ldr	r3, [pc, #264]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b40      	ldr	r3, [pc, #256]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 800092a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a28 <MX_TIM1_Init+0x150>)
 800092c:	224f      	movs	r2, #79	@ 0x4f
 800092e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b3d      	ldr	r3, [pc, #244]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000936:	4b3c      	ldr	r3, [pc, #240]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a28 <MX_TIM1_Init+0x150>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000942:	4839      	ldr	r0, [pc, #228]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000944:	f002 fa74 	bl	8002e30 <HAL_TIM_Base_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800094e:	f000 f8e1 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000952:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000956:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000958:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800095c:	4619      	mov	r1, r3
 800095e:	4832      	ldr	r0, [pc, #200]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000960:	f002 fe38 	bl	80035d4 <HAL_TIM_ConfigClockSource>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 f8d3 	bl	8000b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800096e:	482e      	ldr	r0, [pc, #184]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000970:	f002 fab5 	bl	8002ede <HAL_TIM_PWM_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800097a:	f000 f8cb 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	2300      	movs	r3, #0
 8000980:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800098a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800098e:	4619      	mov	r1, r3
 8000990:	4825      	ldr	r0, [pc, #148]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000992:	f003 fbc1 	bl	8004118 <HAL_TIMEx_MasterConfigSynchronization>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800099c:	f000 f8ba 	bl	8000b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a0:	2360      	movs	r3, #96	@ 0x60
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a8:	2300      	movs	r3, #0
 80009aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009c0:	2204      	movs	r2, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4818      	ldr	r0, [pc, #96]	@ (8000a28 <MX_TIM1_Init+0x150>)
 80009c6:	f002 fcf1 	bl	80033ac <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80009d0:	f000 f8a0 	bl	8000b14 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4807      	ldr	r0, [pc, #28]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000a0a:	f003 fbf3 	bl	80041f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000a14:	f000 f87e 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a18:	4803      	ldr	r0, [pc, #12]	@ (8000a28 <MX_TIM1_Init+0x150>)
 8000a1a:	f000 f8ef 	bl	8000bfc <HAL_TIM_MspPostInit>

}
 8000a1e:	bf00      	nop
 8000a20:	3768      	adds	r7, #104	@ 0x68
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000028 	.word	0x20000028
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a36:	4a15      	ldr	r2, [pc, #84]	@ (8000a8c <MX_USART2_UART_Init+0x5c>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a3c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART2_UART_Init+0x58>)
 8000a74:	f003 fc36 	bl	80042e4 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a7e:	f000 f849 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000b8 	.word	0x200000b8
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_DMA_Init+0x38>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <MX_DMA_Init+0x38>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_DMA_Init+0x38>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	200d      	movs	r0, #13
 8000ab4:	f000 faf9 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ab8:	200d      	movs	r0, #13
 8000aba:	f000 fb12 	bl	80010e2 <HAL_NVIC_EnableIRQ>

}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6153      	str	r3, [r2, #20]
 8000ade:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a08      	ldr	r2, [pc, #32]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <MX_GPIO_Init+0x44>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	40021000 	.word	0x40021000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <Error_Handler+0x8>

08000b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6193      	str	r3, [r2, #24]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a1d      	ldr	r2, [pc, #116]	@ (8000bec <HAL_TIM_Base_MspInit+0x84>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d133      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x88>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x88>)
 8000b80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf0 <HAL_TIM_Base_MspInit+0x88>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000b94:	4a18      	ldr	r2, [pc, #96]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x90>)
 8000b96:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000ba6:	2280      	movs	r2, #128	@ 0x80
 8000ba8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bb0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000bc6:	480b      	ldr	r0, [pc, #44]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bc8:	f000 faa5 	bl	8001116 <HAL_DMA_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000bd2:	f7ff ff9f 	bl	8000b14 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a06      	ldr	r2, [pc, #24]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bda:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bdc:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x8c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40012c00 	.word	0x40012c00
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	20000074 	.word	0x20000074
 8000bf8:	40020030 	.word	0x40020030

08000bfc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <HAL_TIM_MspPostInit+0x68>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d11d      	bne.n	8000c5a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_TIM_MspPostInit+0x6c>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a11      	ldr	r2, [pc, #68]	@ (8000c68 <HAL_TIM_MspPostInit+0x6c>)
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c68 <HAL_TIM_MspPostInit+0x6c>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_DMA_OUT_Pin;
 8000c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DMA_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f000 fbf5 	bl	8001444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3720      	adds	r7, #32
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40012c00 	.word	0x40012c00
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <HAL_UART_MspInit+0x80>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d129      	bne.n	8000ce2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c90:	69db      	ldr	r3, [r3, #28]
 8000c92:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	61d3      	str	r3, [r2, #28]
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000c9c:	69db      	ldr	r3, [r3, #28]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	4a11      	ldr	r2, [pc, #68]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	6153      	str	r3, [r2, #20]
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_UART_MspInit+0x84>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000cbe:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f000 fbb1 	bl	8001444 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <BusFault_Handler+0x4>

08000d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <UsageFault_Handler+0x4>

08000d1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f88f 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <DMA1_Channel3_IRQHandler+0x10>)
 8000d5a:	f000 fa82 	bl	8001262 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000074 	.word	0x20000074

08000d68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	@ (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 fe3b 	bl	8004a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fcfe 	bl	80007be <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	08004ad4 	.word	0x08004ad4
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000144 	.word	0x20000144

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de4:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <HAL_Init+0x28>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a07      	ldr	r2, [pc, #28]	@ (8000e08 <HAL_Init+0x28>)
 8000dea:	f043 0310 	orr.w	r3, r3, #16
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df0:	2003      	movs	r0, #3
 8000df2:	f000 f94f 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f808 	bl	8000e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dfc:	f7ff fe90 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_InitTick+0x54>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <HAL_InitTick+0x58>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f967 	bl	80010fe <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e48:	f000 f92f 	bl	80010aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <HAL_InitTick+0x5c>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000000 	.word	0x20000000
 8000e64:	20000008 	.word	0x20000008
 8000e68:	20000004 	.word	0x20000004

08000e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000140 	.word	0x20000140

08000e94 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000140 	.word	0x20000140

08000eac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffee 	bl	8000e94 <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffde 	bl	8000e94 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	@ (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	@ (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	@ (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	@ 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	@ (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010bc:	f7ff ff3e 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	6978      	ldr	r0, [r7, #20]
 80010c8:	f7ff ff8e 	bl	8000fe8 <NVIC_EncodePriority>
 80010cc:	4602      	mov	r2, r0
 80010ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff5d 	bl	8000f94 <__NVIC_SetPriority>
}
 80010da:	bf00      	nop
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ff31 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ffa2 	bl	8001050 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b084      	sub	sp, #16
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e037      	b.n	800119c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001142:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001146:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800115c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f940 	bl	8001404 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d101      	bne.n	80011c4 <HAL_DMA_Start_IT+0x20>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e04a      	b.n	800125a <HAL_DMA_Start_IT+0xb6>
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d13a      	bne.n	800124c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2202      	movs	r2, #2
 80011da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	68b9      	ldr	r1, [r7, #8]
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f8d4 	bl	80013a8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	2b00      	cmp	r3, #0
 8001206:	d008      	beq.n	800121a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 020e 	orr.w	r2, r2, #14
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e00f      	b.n	800123a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 020a 	orr.w	r2, r2, #10
 8001228:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f022 0204 	bic.w	r2, r2, #4
 8001238:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e005      	b.n	8001258 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001254:	2302      	movs	r3, #2
 8001256:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001258:	7dfb      	ldrb	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	2204      	movs	r2, #4
 8001280:	409a      	lsls	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d024      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x72>
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d01f      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0320 	and.w	r3, r3, #32
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0204 	bic.w	r2, r2, #4
 80012b0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012ba:	2104      	movs	r1, #4
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d06a      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012d2:	e065      	b.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d8:	2202      	movs	r2, #2
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d02c      	beq.n	800133e <HAL_DMA_IRQHandler+0xdc>
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d027      	beq.n	800133e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 020a 	bic.w	r2, r2, #10
 800130a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800131c:	2102      	movs	r1, #2
 800131e:	fa01 f202 	lsl.w	r2, r1, r2
 8001322:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	2b00      	cmp	r3, #0
 8001332:	d035      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800133c:	e030      	b.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	2208      	movs	r2, #8
 8001344:	409a      	lsls	r2, r3
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d028      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	2b00      	cmp	r3, #0
 8001356:	d023      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 020e 	bic.w	r2, r2, #14
 8001366:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f202 	lsl.w	r2, r1, r2
 8001376:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
    }
  }
}
 800139e:	e7ff      	b.n	80013a0 <HAL_DMA_IRQHandler+0x13e>
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d108      	bne.n	80013e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013e6:	e007      	b.n	80013f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	60da      	str	r2, [r3, #12]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <DMA_CalcBaseAndBitshift+0x34>)
 8001414:	4413      	add	r3, r2
 8001416:	4a09      	ldr	r2, [pc, #36]	@ (800143c <DMA_CalcBaseAndBitshift+0x38>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	009a      	lsls	r2, r3, #2
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <DMA_CalcBaseAndBitshift+0x3c>)
 8001428:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	bffdfff8 	.word	0xbffdfff8
 800143c:	cccccccd 	.word	0xcccccccd
 8001440:	40020000 	.word	0x40020000

08001444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001452:	e14e      	b.n	80016f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fa01 f303 	lsl.w	r3, r1, r3
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8140 	beq.w	80016ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d005      	beq.n	8001484 <HAL_GPIO_Init+0x40>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d130      	bne.n	80014e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ba:	2201      	movs	r2, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4013      	ands	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	091b      	lsrs	r3, r3, #4
 80014d0:	f003 0201 	and.w	r2, r3, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d017      	beq.n	8001522 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d123      	bne.n	8001576 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	08da      	lsrs	r2, r3, #3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3208      	adds	r2, #8
 8001536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	08da      	lsrs	r2, r3, #3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3208      	adds	r2, #8
 8001570:	6939      	ldr	r1, [r7, #16]
 8001572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4013      	ands	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 0203 	and.w	r2, r3, #3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 809a 	beq.w	80016ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b55      	ldr	r3, [pc, #340]	@ (8001710 <HAL_GPIO_Init+0x2cc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a54      	ldr	r2, [pc, #336]	@ (8001710 <HAL_GPIO_Init+0x2cc>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b52      	ldr	r3, [pc, #328]	@ (8001710 <HAL_GPIO_Init+0x2cc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d0:	4a50      	ldr	r2, [pc, #320]	@ (8001714 <HAL_GPIO_Init+0x2d0>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1e0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a46      	ldr	r2, [pc, #280]	@ (8001718 <HAL_GPIO_Init+0x2d4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1dc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a45      	ldr	r2, [pc, #276]	@ (800171c <HAL_GPIO_Init+0x2d8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1d8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a44      	ldr	r2, [pc, #272]	@ (8001720 <HAL_GPIO_Init+0x2dc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1d4>
 8001614:	2303      	movs	r3, #3
 8001616:	e006      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001618:	2305      	movs	r3, #5
 800161a:	e004      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 800161c:	2302      	movs	r3, #2
 800161e:	e002      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_GPIO_Init+0x1e2>
 8001624:	2300      	movs	r3, #0
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	f002 0203 	and.w	r2, r2, #3
 800162c:	0092      	lsls	r2, r2, #2
 800162e:	4093      	lsls	r3, r2
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001636:	4937      	ldr	r1, [pc, #220]	@ (8001714 <HAL_GPIO_Init+0x2d0>)
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001644:	4b37      	ldr	r3, [pc, #220]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001668:	4a2e      	ldr	r2, [pc, #184]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166e:	4b2d      	ldr	r3, [pc, #180]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001692:	4a24      	ldr	r2, [pc, #144]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001698:	4b22      	ldr	r3, [pc, #136]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001724 <HAL_GPIO_Init+0x2e0>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	3301      	adds	r3, #1
 80016f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f47f aea9 	bne.w	8001454 <HAL_GPIO_Init+0x10>
  }
}
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40021000 	.word	0x40021000
 8001714:	40010000 	.word	0x40010000
 8001718:	48000400 	.word	0x48000400
 800171c:	48000800 	.word	0x48000800
 8001720:	48000c00 	.word	0x48000c00
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800172e:	af00      	add	r7, sp, #0
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001738:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800173e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	f001 b823 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001752:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 817d 	beq.w	8001a5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001764:	4bbc      	ldr	r3, [pc, #752]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d00c      	beq.n	800178a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001770:	4bb9      	ldr	r3, [pc, #740]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b08      	cmp	r3, #8
 800177a:	d15c      	bne.n	8001836 <HAL_RCC_OscConfig+0x10e>
 800177c:	4bb6      	ldr	r3, [pc, #728]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001788:	d155      	bne.n	8001836 <HAL_RCC_OscConfig+0x10e>
 800178a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800179e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a2:	fab3 f383 	clz	r3, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	095b      	lsrs	r3, r3, #5
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d102      	bne.n	80017bc <HAL_RCC_OscConfig+0x94>
 80017b6:	4ba8      	ldr	r3, [pc, #672]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	e015      	b.n	80017e8 <HAL_RCC_OscConfig+0xc0>
 80017bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80017e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80017f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017f4:	fa92 f2a2 	rbit	r2, r2
 80017f8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80017fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001800:	fab2 f282 	clz	r2, r2
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	f042 0220 	orr.w	r2, r2, #32
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	f002 021f 	and.w	r2, r2, #31
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 811f 	beq.w	8001a5c <HAL_RCC_OscConfig+0x334>
 800181e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8116 	bne.w	8001a5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	f000 bfaf 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800183a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001846:	d106      	bne.n	8001856 <HAL_RCC_OscConfig+0x12e>
 8001848:	4b83      	ldr	r3, [pc, #524]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a82      	ldr	r2, [pc, #520]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800184e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e036      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10c      	bne.n	8001880 <HAL_RCC_OscConfig+0x158>
 8001866:	4b7c      	ldr	r3, [pc, #496]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800186c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a78      	ldr	r2, [pc, #480]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001878:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e021      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 8001880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0x184>
 8001892:	4b71      	ldr	r3, [pc, #452]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a70      	ldr	r2, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0x19c>
 80018ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a69      	ldr	r2, [pc, #420]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b67      	ldr	r3, [pc, #412]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a66      	ldr	r2, [pc, #408]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c4:	4b64      	ldr	r3, [pc, #400]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c8:	f023 020f 	bic.w	r2, r3, #15
 80018cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	495f      	ldr	r1, [pc, #380]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d059      	beq.n	80019a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff fad1 	bl	8000e94 <HAL_GetTick>
 80018f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f6:	e00a      	b.n	800190e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff facc 	bl	8000e94 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	@ 0x64
 8001906:	d902      	bls.n	800190e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	f000 bf43 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 800190e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001912:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800191a:	fa93 f3a3 	rbit	r3, r3
 800191e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	fab3 f383 	clz	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	095b      	lsrs	r3, r3, #5
 800192e:	b2db      	uxtb	r3, r3
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <HAL_RCC_OscConfig+0x218>
 800193a:	4b47      	ldr	r3, [pc, #284]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e015      	b.n	800196c <HAL_RCC_OscConfig+0x244>
 8001940:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001944:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001948:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800194c:	fa93 f3a3 	rbit	r3, r3
 8001950:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001954:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001958:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800195c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001960:	fa93 f3a3 	rbit	r3, r3
 8001964:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001968:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001970:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001974:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001978:	fa92 f2a2 	rbit	r2, r2
 800197c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001980:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	f002 021f 	and.w	r2, r2, #31
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ab      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1d0>
 80019a0:	e05d      	b.n	8001a5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa77 	bl	8000e94 <HAL_GetTick>
 80019a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fa72 	bl	8000e94 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b64      	cmp	r3, #100	@ 0x64
 80019ba:	d902      	bls.n	80019c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	f000 bee9 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 80019c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80019d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2cc>
 80019ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e015      	b.n	8001a20 <HAL_RCC_OscConfig+0x2f8>
 80019f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019f8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001a08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a0c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001a10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a14:	fa93 f3a3 	rbit	r3, r3
 8001a18:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_RCC_OscConfig+0x330>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a20:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a24:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001a28:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001a34:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001a38:	fab2 f282 	clz	r2, r2
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f042 0220 	orr.w	r2, r2, #32
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f002 021f 	and.w	r2, r2, #31
 8001a48:	2101      	movs	r1, #1
 8001a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ab      	bne.n	80019ac <HAL_RCC_OscConfig+0x284>
 8001a54:	e003      	b.n	8001a5e <HAL_RCC_OscConfig+0x336>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 817d 	beq.w	8001d6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a74:	4ba6      	ldr	r3, [pc, #664]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a80:	4ba3      	ldr	r3, [pc, #652]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d172      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001a8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d16c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x44a>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001aaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x3a0>
 8001ac2:	4b93      	ldr	r3, [pc, #588]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e013      	b.n	8001af0 <HAL_RCC_OscConfig+0x3c8>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001ad2:	fa93 f3a3 	rbit	r3, r3
 8001ad6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001aec:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af0:	2202      	movs	r2, #2
 8001af2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001af6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001afa:	fa92 f2a2 	rbit	r2, r2
 8001afe:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001b02:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001b06:	fab2 f282 	clz	r2, r2
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	f042 0220 	orr.w	r2, r2, #32
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	f002 021f 	and.w	r2, r2, #31
 8001b16:	2101      	movs	r1, #1
 8001b18:	fa01 f202 	lsl.w	r2, r1, r2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x410>
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	f000 be2e 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b75      	ldr	r3, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	21f8      	movs	r1, #248	@ 0xf8
 8001b4e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b56:	fa91 f1a1 	rbit	r1, r1
 8001b5a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001b5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001b62:	fab1 f181 	clz	r1, r1
 8001b66:	b2c9      	uxtb	r1, r1
 8001b68:	408b      	lsls	r3, r1
 8001b6a:	4969      	ldr	r1, [pc, #420]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b70:	e0fd      	b.n	8001d6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8088 	beq.w	8001c94 <HAL_RCC_OscConfig+0x56c>
 8001b84:	2301      	movs	r3, #1
 8001b86:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001b8e:	fa93 f3a3 	rbit	r3, r3
 8001b92:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001b96:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b9a:	fab3 f383 	clz	r3, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ba4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	461a      	mov	r2, r3
 8001bac:	2301      	movs	r3, #1
 8001bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f970 	bl	8000e94 <HAL_GetTick>
 8001bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e00a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f96b 	bl	8000e94 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d902      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f000 bde2 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001bda:	fa93 f3a3 	rbit	r3, r3
 8001bde:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001be2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4d8>
 8001bfa:	4b45      	ldr	r3, [pc, #276]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0x500>
 8001c00:	2302      	movs	r3, #2
 8001c02:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001c12:	2302      	movs	r3, #2
 8001c14:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001c18:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001c24:	4b3a      	ldr	r3, [pc, #232]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001c2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c32:	fa92 f2a2 	rbit	r2, r2
 8001c36:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001c3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001c3e:	fab2 f282 	clz	r2, r2
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	f042 0220 	orr.w	r2, r2, #32
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f002 021f 	and.w	r2, r2, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0af      	beq.n	8001bba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	21f8      	movs	r1, #248	@ 0xf8
 8001c70:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c78:	fa91 f1a1 	rbit	r1, r1
 8001c7c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001c80:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001c84:	fab1 f181 	clz	r1, r1
 8001c88:	b2c9      	uxtb	r1, r1
 8001c8a:	408b      	lsls	r3, r1
 8001c8c:	4920      	ldr	r1, [pc, #128]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
 8001c92:	e06c      	b.n	8001d6e <HAL_RCC_OscConfig+0x646>
 8001c94:	2301      	movs	r3, #1
 8001c96:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001cb4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	461a      	mov	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f8e8 	bl	8000e94 <HAL_GetTick>
 8001cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f8e3 	bl	8000e94 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d902      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f000 bd5a 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d104      	bne.n	8001d14 <HAL_RCC_OscConfig+0x5ec>
 8001d0a:	4b01      	ldr	r3, [pc, #4]	@ (8001d10 <HAL_RCC_OscConfig+0x5e8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x614>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d26:	2302      	movs	r3, #2
 8001d28:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001d38:	4bc8      	ldr	r3, [pc, #800]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d46:	fa92 f2a2 	rbit	r2, r2
 8001d4a:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001d4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	f042 0220 	orr.w	r2, r2, #32
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	f002 021f 	and.w	r2, r2, #31
 8001d62:	2101      	movs	r1, #1
 8001d64:	fa01 f202 	lsl.w	r2, r1, r2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1ad      	bne.n	8001cca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d72:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 8110 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d079      	beq.n	8001e88 <HAL_RCC_OscConfig+0x760>
 8001d94:	2301      	movs	r3, #1
 8001d96:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4bab      	ldr	r3, [pc, #684]	@ (8002060 <HAL_RCC_OscConfig+0x938>)
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	461a      	mov	r2, r3
 8001dba:	2301      	movs	r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7ff f869 	bl	8000e94 <HAL_GetTick>
 8001dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f864 	bl	8000e94 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d902      	bls.n	8001dde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	f000 bcdb 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001de8:	fa93 f3a3 	rbit	r3, r3
 8001dec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001df8:	2202      	movs	r2, #2
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e00:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	fa93 f2a3 	rbit	r2, r3
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	fa93 f2a3 	rbit	r2, r3
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e38:	4b88      	ldr	r3, [pc, #544]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001e3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e44:	2102      	movs	r1, #2
 8001e46:	6019      	str	r1, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f1a3 	rbit	r1, r3
 8001e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5e:	6019      	str	r1, [r3, #0]
  return result;
 8001e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	4013      	ands	r3, r2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0a0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x6a0>
 8001e86:	e08d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x87c>
 8001e88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e8c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	fa93 f2a3 	rbit	r2, r3
 8001ea2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eaa:	601a      	str	r2, [r3, #0]
  return result;
 8001eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b68      	ldr	r3, [pc, #416]	@ (8002060 <HAL_RCC_OscConfig+0x938>)
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe ffe3 	bl	8000e94 <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ffde 	bl	8000e94 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 bc55 	b.w	8002794 <HAL_RCC_OscConfig+0x106c>
 8001eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	fa93 f2a3 	rbit	r2, r3
 8001f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f08:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f16:	2202      	movs	r2, #2
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fa93 f2a3 	rbit	r2, r3
 8001f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f36:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	fa93 f2a3 	rbit	r2, r3
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f56:	4b41      	ldr	r3, [pc, #260]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001f58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f62:	2102      	movs	r1, #2
 8001f64:	6019      	str	r1, [r3, #0]
 8001f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	fa93 f1a3 	rbit	r1, r3
 8001f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f78:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f7c:	6019      	str	r1, [r3, #0]
  return result;
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 031f 	and.w	r3, r3, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d197      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 81a1 	beq.w	80022fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc0:	4b26      	ldr	r3, [pc, #152]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b23      	ldr	r3, [pc, #140]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	4a22      	ldr	r2, [pc, #136]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	61d3      	str	r3, [r2, #28]
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ff2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11a      	bne.n	800203c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b17      	ldr	r3, [pc, #92]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002010:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe ff3f 	bl	8000e94 <HAL_GetTick>
 8002016:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201a:	e009      	b.n	8002030 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe ff3a 	bl	8000e94 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b64      	cmp	r3, #100	@ 0x64
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e3b1      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_RCC_OscConfig+0x93c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002040:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_OscConfig+0x940>
 800204c:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a02      	ldr	r2, [pc, #8]	@ (800205c <HAL_RCC_OscConfig+0x934>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e03c      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000
 8002060:	10908120 	.word	0x10908120
 8002064:	40007000 	.word	0x40007000
 8002068:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10c      	bne.n	8002092 <HAL_RCC_OscConfig+0x96a>
 8002078:	4bc1      	ldr	r3, [pc, #772]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4ac0      	ldr	r2, [pc, #768]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800207e:	f023 0301 	bic.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	4bbe      	ldr	r3, [pc, #760]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4abd      	ldr	r2, [pc, #756]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800208a:	f023 0304 	bic.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	e020      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d10c      	bne.n	80020bc <HAL_RCC_OscConfig+0x994>
 80020a2:	4bb7      	ldr	r3, [pc, #732]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4ab6      	ldr	r2, [pc, #728]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6213      	str	r3, [r2, #32]
 80020ae:	4bb4      	ldr	r3, [pc, #720]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4ab3      	ldr	r2, [pc, #716]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6213      	str	r3, [r2, #32]
 80020ba:	e00b      	b.n	80020d4 <HAL_RCC_OscConfig+0x9ac>
 80020bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4aaf      	ldr	r2, [pc, #700]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020c2:	f023 0301 	bic.w	r3, r3, #1
 80020c6:	6213      	str	r3, [r2, #32]
 80020c8:	4bad      	ldr	r3, [pc, #692]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4aac      	ldr	r2, [pc, #688]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80020ce:	f023 0304 	bic.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8081 	beq.w	80021e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe fed5 	bl	8000e94 <HAL_GetTick>
 80020ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe fed0 	bl	8000e94 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e345      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002110:	2202      	movs	r2, #2
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800213c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d102      	bne.n	8002174 <HAL_RCC_OscConfig+0xa4c>
 800216e:	4b84      	ldr	r3, [pc, #528]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	e013      	b.n	800219c <HAL_RCC_OscConfig+0xa74>
 8002174:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002178:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800217c:	2202      	movs	r2, #2
 800217e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4b79      	ldr	r3, [pc, #484]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021a4:	2102      	movs	r1, #2
 80021a6:	6011      	str	r1, [r2, #0]
 80021a8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ac:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	fa92 f1a2 	rbit	r1, r2
 80021b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ba:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021be:	6011      	str	r1, [r2, #0]
  return result;
 80021c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	f002 021f 	and.w	r2, r2, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f202 	lsl.w	r2, r1, r2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d084      	beq.n	80020f0 <HAL_RCC_OscConfig+0x9c8>
 80021e6:	e07f      	b.n	80022e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fe54 	bl	8000e94 <HAL_GetTick>
 80021ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	e00b      	b.n	800220a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f2:	f7fe fe4f 	bl	8000e94 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e2c4      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 800220a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002212:	2202      	movs	r2, #2
 8002214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800221a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002232:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002250:	601a      	str	r2, [r3, #0]
  return result;
 8002252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002256:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800225a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	095b      	lsrs	r3, r3, #5
 8002264:	b2db      	uxtb	r3, r3
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d102      	bne.n	8002276 <HAL_RCC_OscConfig+0xb4e>
 8002270:	4b43      	ldr	r3, [pc, #268]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	e013      	b.n	800229e <HAL_RCC_OscConfig+0xb76>
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800227e:	2202      	movs	r2, #2
 8002280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	4b39      	ldr	r3, [pc, #228]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a2:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022a6:	2102      	movs	r1, #2
 80022a8:	6011      	str	r1, [r2, #0]
 80022aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ae:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	fa92 f1a2 	rbit	r1, r2
 80022b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022bc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022c0:	6011      	str	r1, [r2, #0]
  return result;
 80022c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	fab2 f282 	clz	r2, r2
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d184      	bne.n	80021f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b23      	ldr	r3, [pc, #140]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4a22      	ldr	r2, [pc, #136]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 80022f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 8242 	beq.w	8002792 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800230e:	4b1c      	ldr	r3, [pc, #112]	@ (8002380 <HAL_RCC_OscConfig+0xc58>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 030c 	and.w	r3, r3, #12
 8002316:	2b08      	cmp	r3, #8
 8002318:	f000 8213 	beq.w	8002742 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002320:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f040 8162 	bne.w	80025f2 <HAL_RCC_OscConfig+0xeca>
 800232e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002332:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002336:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800233a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002340:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	fa93 f2a3 	rbit	r2, r3
 800234a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800234e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002352:	601a      	str	r2, [r3, #0]
  return result;
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800235c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002368:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	461a      	mov	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fd8e 	bl	8000e94 <HAL_GetTick>
 8002378:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e00c      	b.n	8002398 <HAL_RCC_OscConfig+0xc70>
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fd86 	bl	8000e94 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1fd      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002398:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023aa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80023c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0xcba>
 80023dc:	4bb0      	ldr	r3, [pc, #704]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	e027      	b.n	8002432 <HAL_RCC_OscConfig+0xd0a>
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002402:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002410:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800241a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	4b9c      	ldr	r3, [pc, #624]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002432:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002436:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800243a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800243e:	6011      	str	r1, [r2, #0]
 8002440:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002444:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	fa92 f1a2 	rbit	r1, r2
 800244e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002452:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002456:	6011      	str	r1, [r2, #0]
  return result;
 8002458:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800245c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d182      	bne.n	8002384 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b88      	ldr	r3, [pc, #544]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002496:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	430b      	orrs	r3, r1
 80024a0:	497f      	ldr	r1, [pc, #508]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	604b      	str	r3, [r1, #4]
 80024a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024aa:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024ae:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b8:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	fa93 f2a3 	rbit	r2, r3
 80024c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ca:	601a      	str	r2, [r3, #0]
  return result;
 80024cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d6:	fab3 f383 	clz	r3, r3
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	461a      	mov	r2, r3
 80024e8:	2301      	movs	r3, #1
 80024ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe fcd2 	bl	8000e94 <HAL_GetTick>
 80024f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f4:	e009      	b.n	800250a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7fe fccd 	bl	8000e94 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e144      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 800250a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002512:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002534:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	b2db      	uxtb	r3, r3
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	d102      	bne.n	8002554 <HAL_RCC_OscConfig+0xe2c>
 800254e:	4b54      	ldr	r3, [pc, #336]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e027      	b.n	80025a4 <HAL_RCC_OscConfig+0xe7c>
 8002554:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002558:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800255c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002562:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002566:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	fa93 f2a3 	rbit	r2, r3
 8002570:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002574:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800257e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002582:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800258c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	fa93 f2a3 	rbit	r2, r3
 8002596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b3f      	ldr	r3, [pc, #252]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025b0:	6011      	str	r1, [r2, #0]
 80025b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	fa92 f1a2 	rbit	r1, r2
 80025c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025c8:	6011      	str	r1, [r2, #0]
  return result;
 80025ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025d2:	6812      	ldr	r2, [r2, #0]
 80025d4:	fab2 f282 	clz	r2, r2
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f042 0220 	orr.w	r2, r2, #32
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f002 021f 	and.w	r2, r2, #31
 80025e4:	2101      	movs	r1, #1
 80025e6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d082      	beq.n	80024f6 <HAL_RCC_OscConfig+0xdce>
 80025f0:	e0cf      	b.n	8002792 <HAL_RCC_OscConfig+0x106a>
 80025f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80025fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80025fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002604:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	fa93 f2a3 	rbit	r2, r3
 800260e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002612:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002616:	601a      	str	r2, [r3, #0]
  return result;
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002620:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800262c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	461a      	mov	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fc2c 	bl	8000e94 <HAL_GetTick>
 800263c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002640:	e009      	b.n	8002656 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002642:	f7fe fc27 	bl	8000e94 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e09e      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
 8002656:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800265e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002668:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002676:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800267a:	601a      	str	r2, [r3, #0]
  return result;
 800267c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002680:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d104      	bne.n	80026a4 <HAL_RCC_OscConfig+0xf7c>
 800269a:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <HAL_RCC_OscConfig+0xf78>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e029      	b.n	80026f4 <HAL_RCC_OscConfig+0xfcc>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	fa93 f2a3 	rbit	r2, r3
 80026c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fa93 f2a3 	rbit	r2, r3
 80026e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ea:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	4b2b      	ldr	r3, [pc, #172]	@ (80027a0 <HAL_RCC_OscConfig+0x1078>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80026f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80026fc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002700:	6011      	str	r1, [r2, #0]
 8002702:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002706:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800270a:	6812      	ldr	r2, [r2, #0]
 800270c:	fa92 f1a2 	rbit	r1, r2
 8002710:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002714:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002718:	6011      	str	r1, [r2, #0]
  return result;
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fab2 f282 	clz	r2, r2
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	f042 0220 	orr.w	r2, r2, #32
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	f002 021f 	and.w	r2, r2, #31
 8002734:	2101      	movs	r1, #1
 8002736:	fa01 f202 	lsl.w	r2, r1, r2
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d180      	bne.n	8002642 <HAL_RCC_OscConfig+0xf1a>
 8002740:	e027      	b.n	8002792 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002746:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e01e      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002756:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_RCC_OscConfig+0x1078>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002762:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002766:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800276a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	429a      	cmp	r2, r3
 8002774:	d10b      	bne.n	800278e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800277a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800278a:	429a      	cmp	r2, r3
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b09e      	sub	sp, #120	@ 0x78
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d101      	bne.n	80027bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e162      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027bc:	4b90      	ldr	r3, [pc, #576]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d910      	bls.n	80027ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 0207 	bic.w	r2, r3, #7
 80027d2:	498b      	ldr	r1, [pc, #556]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027da:	4b89      	ldr	r3, [pc, #548]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e14a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f8:	4b82      	ldr	r3, [pc, #520]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	497f      	ldr	r1, [pc, #508]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002806:	4313      	orrs	r3, r2
 8002808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 80dc 	beq.w	80029d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d13c      	bne.n	800289a <HAL_RCC_ClockConfig+0xf6>
 8002820:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002824:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800282e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002830:	fab3 f383 	clz	r3, r3
 8002834:	b2db      	uxtb	r3, r3
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	b2db      	uxtb	r3, r3
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d102      	bne.n	800284a <HAL_RCC_ClockConfig+0xa6>
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	e00f      	b.n	800286a <HAL_RCC_ClockConfig+0xc6>
 800284a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002852:	fa93 f3a3 	rbit	r3, r3
 8002856:	667b      	str	r3, [r7, #100]	@ 0x64
 8002858:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800285c:	663b      	str	r3, [r7, #96]	@ 0x60
 800285e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002866:	4b67      	ldr	r3, [pc, #412]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800286e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002872:	fa92 f2a2 	rbit	r2, r2
 8002876:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002878:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800287a:	fab2 f282 	clz	r2, r2
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	f002 021f 	and.w	r2, r2, #31
 800288a:	2101      	movs	r1, #1
 800288c:	fa01 f202 	lsl.w	r2, r1, r2
 8002890:	4013      	ands	r3, r2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d17b      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e0f3      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d13c      	bne.n	800291c <HAL_RCC_ClockConfig+0x178>
 80028a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_ClockConfig+0x128>
 80028c6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e00f      	b.n	80028ec <HAL_RCC_ClockConfig+0x148>
 80028cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028de:	643b      	str	r3, [r7, #64]	@ 0x40
 80028e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028e8:	4b46      	ldr	r3, [pc, #280]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80028f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028f4:	fa92 f2a2 	rbit	r2, r2
 80028f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80028fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	f002 021f 	and.w	r2, r2, #31
 800290c:	2101      	movs	r1, #1
 800290e:	fa01 f202 	lsl.w	r2, r1, r2
 8002912:	4013      	ands	r3, r2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d13a      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b2      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
 800291c:	2302      	movs	r3, #2
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	fa93 f3a3 	rbit	r3, r3
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	fab3 f383 	clz	r3, r3
 800292e:	b2db      	uxtb	r3, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_RCC_ClockConfig+0x1a0>
 800293e:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	e00d      	b.n	8002960 <HAL_RCC_ClockConfig+0x1bc>
 8002944:	2302      	movs	r3, #2
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002950:	2302      	movs	r3, #2
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	4b29      	ldr	r3, [pc, #164]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	2202      	movs	r2, #2
 8002962:	61ba      	str	r2, [r7, #24]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	617a      	str	r2, [r7, #20]
  return result;
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	fab2 f282 	clz	r2, r2
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	f042 0220 	orr.w	r2, r2, #32
 8002978:	b2d2      	uxtb	r2, r2
 800297a:	f002 021f 	and.w	r2, r2, #31
 800297e:	2101      	movs	r1, #1
 8002980:	fa01 f202 	lsl.w	r2, r1, r2
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e079      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f023 0203 	bic.w	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	491a      	ldr	r1, [pc, #104]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a0:	f7fe fa78 	bl	8000e94 <HAL_GetTick>
 80029a4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	e00a      	b.n	80029be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a8:	f7fe fa74 	bl	8000e94 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e061      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCC_ClockConfig+0x260>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 020c 	and.w	r2, r3, #12
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d1eb      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d214      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b08      	ldr	r3, [pc, #32]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4906      	ldr	r1, [pc, #24]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b04      	ldr	r3, [pc, #16]	@ (8002a00 <HAL_RCC_ClockConfig+0x25c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e040      	b.n	8002a82 <HAL_RCC_ClockConfig+0x2de>
 8002a00:	40022000 	.word	0x40022000
 8002a04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	491a      	ldr	r1, [pc, #104]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4912      	ldr	r1, [pc, #72]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a46:	f000 f829 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4601      	mov	r1, r0
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a8c <HAL_RCC_ClockConfig+0x2e8>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a54:	22f0      	movs	r2, #240	@ 0xf0
 8002a56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	fa92 f2a2 	rbit	r2, r2
 8002a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	fab2 f282 	clz	r2, r2
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	40d3      	lsrs	r3, r2
 8002a6a:	4a09      	ldr	r2, [pc, #36]	@ (8002a90 <HAL_RCC_ClockConfig+0x2ec>)
 8002a6c:	5cd3      	ldrb	r3, [r2, r3]
 8002a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a72:	4a08      	ldr	r2, [pc, #32]	@ (8002a94 <HAL_RCC_ClockConfig+0x2f0>)
 8002a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a76:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_RCC_ClockConfig+0x2f4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f9c6 	bl	8000e0c <HAL_InitTick>
  
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3778      	adds	r7, #120	@ 0x78
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08004a94 	.word	0x08004a94
 8002a94:	20000000 	.word	0x20000000
 8002a98:	20000004 	.word	0x20000004

08002a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 030c 	and.w	r3, r3, #12
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d002      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x30>
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aca:	e026      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	613b      	str	r3, [r7, #16]
      break;
 8002ad0:	e026      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0c9b      	lsrs	r3, r3, #18
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002adc:	5cd3      	ldrb	r3, [r2, r3]
 8002ade:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002aea:	5cd3      	ldrb	r3, [r2, r3]
 8002aec:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002af8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e004      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	613b      	str	r3, [r7, #16]
      break;
 8002b18:	e002      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1c:	613b      	str	r3, [r7, #16]
      break;
 8002b1e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b20:	693b      	ldr	r3, [r7, #16]
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	007a1200 	.word	0x007a1200
 8002b38:	08004aac 	.word	0x08004aac
 8002b3c:	08004abc 	.word	0x08004abc
 8002b40:	003d0900 	.word	0x003d0900

08002b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b62:	f7ff ffef 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b66:	4601      	mov	r1, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b70:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b74:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	fa92 f2a2 	rbit	r2, r2
 8002b7c:	603a      	str	r2, [r7, #0]
  return result;
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	fab2 f282 	clz	r2, r2
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	40d3      	lsrs	r3, r2
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08004aa4 	.word	0x08004aa4

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ba6:	f7ff ffcd 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bb4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	fa92 f2a2 	rbit	r2, r2
 8002bc0:	603a      	str	r2, [r7, #0]
  return result;
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	fab2 f282 	clz	r2, r2
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	40d3      	lsrs	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	@ (8002be0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bce:	5cd3      	ldrb	r3, [r2, r3]
 8002bd0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3708      	adds	r7, #8
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	08004aa4 	.word	0x08004aa4

08002be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b092      	sub	sp, #72	@ 0x48
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 80cd 	beq.w	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c08:	4b86      	ldr	r3, [pc, #536]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10e      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c14:	4b83      	ldr	r3, [pc, #524]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	4a82      	ldr	r2, [pc, #520]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	61d3      	str	r3, [r2, #28]
 8002c20:	4b80      	ldr	r3, [pc, #512]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c32:	4b7d      	ldr	r3, [pc, #500]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d118      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a79      	ldr	r2, [pc, #484]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c48:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c4a:	f7fe f923 	bl	8000e94 <HAL_GetTick>
 8002c4e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	e008      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c52:	f7fe f91f 	bl	8000e94 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	@ 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0db      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c64:	4b70      	ldr	r3, [pc, #448]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c70:	4b6c      	ldr	r3, [pc, #432]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d07d      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d076      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c8e:	4b65      	ldr	r3, [pc, #404]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c98:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c9c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca0:	fa93 f3a3 	rbit	r3, r3
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	2301      	movs	r3, #1
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2300      	movs	r3, #0
 8002cde:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ce0:	4a50      	ldr	r2, [pc, #320]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d045      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f8d0 	bl	8000e94 <HAL_GetTick>
 8002cf4:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf8:	f7fe f8cc 	bl	8000e94 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e086      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	fa93 f3a3 	rbit	r3, r3
 8002d24:	61fb      	str	r3, [r7, #28]
  return result;
 8002d26:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002d3c:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	e007      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4b35      	ldr	r3, [pc, #212]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	2202      	movs	r2, #2
 8002d54:	613a      	str	r2, [r7, #16]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	60fa      	str	r2, [r7, #12]
  return result;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	fab2 f282 	clz	r2, r2
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0bd      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d7c:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4926      	ldr	r1, [pc, #152]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d96:	4b23      	ldr	r3, [pc, #140]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d98:	69db      	ldr	r3, [r3, #28]
 8002d9a:	4a22      	ldr	r2, [pc, #136]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002da0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dae:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	491a      	ldr	r1, [pc, #104]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0320 	and.w	r3, r3, #32
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dcc:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd0:	f023 0210 	bic.w	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4912      	ldr	r1, [pc, #72]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002dea:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	490b      	ldr	r1, [pc, #44]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	4903      	ldr	r1, [pc, #12]	@ (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3748      	adds	r7, #72	@ 0x48
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40007000 	.word	0x40007000
 8002e2c:	10908100 	.word	0x10908100

08002e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e049      	b.n	8002ed6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fd fe86 	bl	8000b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f000 fd68 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e049      	b.n	8002f84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d106      	bne.n	8002f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f841 	bl	8002f8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	f000 fd11 	bl	8003944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_TIM_PWM_Start_DMA+0x2c>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e03c      	b.n	8003046 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d109      	bne.n	8002fe6 <HAL_TIM_PWM_Start_DMA+0x46>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	e02f      	b.n	8003046 <HAL_TIM_PWM_Start_DMA+0xa6>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d109      	bne.n	8003000 <HAL_TIM_PWM_Start_DMA+0x60>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e022      	b.n	8003046 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d109      	bne.n	800301a <HAL_TIM_PWM_Start_DMA+0x7a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	bf0c      	ite	eq
 8003012:	2301      	moveq	r3, #1
 8003014:	2300      	movne	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e015      	b.n	8003046 <HAL_TIM_PWM_Start_DMA+0xa6>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b10      	cmp	r3, #16
 800301e:	d109      	bne.n	8003034 <HAL_TIM_PWM_Start_DMA+0x94>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	bf0c      	ite	eq
 800302c:	2301      	moveq	r3, #1
 800302e:	2300      	movne	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e008      	b.n	8003046 <HAL_TIM_PWM_Start_DMA+0xa6>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
 800304c:	e197      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d109      	bne.n	8003068 <HAL_TIM_PWM_Start_DMA+0xc8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e03c      	b.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d109      	bne.n	8003082 <HAL_TIM_PWM_Start_DMA+0xe2>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	bf0c      	ite	eq
 800307a:	2301      	moveq	r3, #1
 800307c:	2300      	movne	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e02f      	b.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x142>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b08      	cmp	r3, #8
 8003086:	d109      	bne.n	800309c <HAL_TIM_PWM_Start_DMA+0xfc>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	bf0c      	ite	eq
 8003094:	2301      	moveq	r3, #1
 8003096:	2300      	movne	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	e022      	b.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x142>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	d109      	bne.n	80030b6 <HAL_TIM_PWM_Start_DMA+0x116>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e015      	b.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start_DMA+0x130>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e008      	b.n	80030e2 <HAL_TIM_PWM_Start_DMA+0x142>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d034      	beq.n	8003150 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80030ec:	887b      	ldrh	r3, [r7, #2]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e143      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <HAL_TIM_PWM_Start_DMA+0x166>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003104:	e026      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start_DMA+0x176>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003114:	e01e      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start_DMA+0x186>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003124:	e016      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b0c      	cmp	r3, #12
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start_DMA+0x196>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003134:	e00e      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b10      	cmp	r3, #16
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003144:	e006      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800314e:	e001      	b.n	8003154 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e114      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b0c      	cmp	r3, #12
 8003158:	f200 80ae 	bhi.w	80032b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800315c:	a201      	add	r2, pc, #4	@ (adr r2, 8003164 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003199 	.word	0x08003199
 8003168:	080032b9 	.word	0x080032b9
 800316c:	080032b9 	.word	0x080032b9
 8003170:	080032b9 	.word	0x080032b9
 8003174:	080031e1 	.word	0x080031e1
 8003178:	080032b9 	.word	0x080032b9
 800317c:	080032b9 	.word	0x080032b9
 8003180:	080032b9 	.word	0x080032b9
 8003184:	08003229 	.word	0x08003229
 8003188:	080032b9 	.word	0x080032b9
 800318c:	080032b9 	.word	0x080032b9
 8003190:	080032b9 	.word	0x080032b9
 8003194:	08003271 	.word	0x08003271
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	4a7a      	ldr	r2, [pc, #488]	@ (8003388 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	4a79      	ldr	r2, [pc, #484]	@ (800338c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ac:	4a78      	ldr	r2, [pc, #480]	@ (8003390 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3334      	adds	r3, #52	@ 0x34
 80031bc:	461a      	mov	r2, r3
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	f7fd fff0 	bl	80011a4 <HAL_DMA_Start_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0d7      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031dc:	60da      	str	r2, [r3, #12]
      break;
 80031de:	e06e      	b.n	80032be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e4:	4a68      	ldr	r2, [pc, #416]	@ (8003388 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80031e6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	4a67      	ldr	r2, [pc, #412]	@ (800338c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80031ee:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	4a66      	ldr	r2, [pc, #408]	@ (8003390 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3338      	adds	r3, #56	@ 0x38
 8003204:	461a      	mov	r2, r3
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	f7fd ffcc 	bl	80011a4 <HAL_DMA_Start_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0b3      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003224:	60da      	str	r2, [r3, #12]
      break;
 8003226:	e04a      	b.n	80032be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322c:	4a56      	ldr	r2, [pc, #344]	@ (8003388 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800322e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	4a55      	ldr	r2, [pc, #340]	@ (800338c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003236:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	4a54      	ldr	r2, [pc, #336]	@ (8003390 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	333c      	adds	r3, #60	@ 0x3c
 800324c:	461a      	mov	r2, r3
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	f7fd ffa8 	bl	80011a4 <HAL_DMA_Start_IT>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e08f      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800326c:	60da      	str	r2, [r3, #12]
      break;
 800326e:	e026      	b.n	80032be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003274:	4a44      	ldr	r2, [pc, #272]	@ (8003388 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003276:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	4a43      	ldr	r2, [pc, #268]	@ (800338c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003284:	4a42      	ldr	r2, [pc, #264]	@ (8003390 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3340      	adds	r3, #64	@ 0x40
 8003294:	461a      	mov	r2, r3
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	f7fd ff84 	bl	80011a4 <HAL_DMA_Start_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80032b4:	60da      	str	r2, [r3, #12]
      break;
 80032b6:	e002      	b.n	80032be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
      break;
 80032bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80032be:	7dfb      	ldrb	r3, [r7, #23]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d15b      	bne.n	800337c <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2201      	movs	r2, #1
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fefd 	bl	80040cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2f      	ldr	r2, [pc, #188]	@ (8003394 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d00e      	beq.n	80032fa <HAL_TIM_PWM_Start_DMA+0x35a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003398 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d009      	beq.n	80032fa <HAL_TIM_PWM_Start_DMA+0x35a>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	@ (800339c <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d004      	beq.n	80032fa <HAL_TIM_PWM_Start_DMA+0x35a>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2a      	ldr	r2, [pc, #168]	@ (80033a0 <HAL_TIM_PWM_Start_DMA+0x400>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_Start_DMA+0x35e>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <HAL_TIM_PWM_Start_DMA+0x360>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d007      	beq.n	8003314 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003312:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_TIM_PWM_Start_DMA+0x39c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d009      	beq.n	800333c <HAL_TIM_PWM_Start_DMA+0x39c>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1d      	ldr	r2, [pc, #116]	@ (80033a4 <HAL_TIM_PWM_Start_DMA+0x404>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_TIM_PWM_Start_DMA+0x39c>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <HAL_TIM_PWM_Start_DMA+0x3f8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d115      	bne.n	8003368 <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_TIM_PWM_Start_DMA+0x408>)
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b06      	cmp	r3, #6
 800334c:	d015      	beq.n	800337a <HAL_TIM_PWM_Start_DMA+0x3da>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003354:	d011      	beq.n	800337a <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0201 	orr.w	r2, r2, #1
 8003364:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003366:	e008      	b.n	800337a <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e000      	b.n	800337c <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800337c:	7dfb      	ldrb	r3, [r7, #23]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08003835 	.word	0x08003835
 800338c:	080038dd 	.word	0x080038dd
 8003390:	080037a3 	.word	0x080037a3
 8003394:	40012c00 	.word	0x40012c00
 8003398:	40014000 	.word	0x40014000
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	40000400 	.word	0x40000400
 80033a8:	00010007 	.word	0x00010007

080033ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e0ff      	b.n	80035ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b14      	cmp	r3, #20
 80033d6:	f200 80f0 	bhi.w	80035ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80033da:	a201      	add	r2, pc, #4	@ (adr r2, 80033e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e0:	08003435 	.word	0x08003435
 80033e4:	080035bb 	.word	0x080035bb
 80033e8:	080035bb 	.word	0x080035bb
 80033ec:	080035bb 	.word	0x080035bb
 80033f0:	08003475 	.word	0x08003475
 80033f4:	080035bb 	.word	0x080035bb
 80033f8:	080035bb 	.word	0x080035bb
 80033fc:	080035bb 	.word	0x080035bb
 8003400:	080034b7 	.word	0x080034b7
 8003404:	080035bb 	.word	0x080035bb
 8003408:	080035bb 	.word	0x080035bb
 800340c:	080035bb 	.word	0x080035bb
 8003410:	080034f7 	.word	0x080034f7
 8003414:	080035bb 	.word	0x080035bb
 8003418:	080035bb 	.word	0x080035bb
 800341c:	080035bb 	.word	0x080035bb
 8003420:	08003539 	.word	0x08003539
 8003424:	080035bb 	.word	0x080035bb
 8003428:	080035bb 	.word	0x080035bb
 800342c:	080035bb 	.word	0x080035bb
 8003430:	08003579 	.word	0x08003579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fb06 	bl	8003a4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0208 	orr.w	r2, r2, #8
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0204 	bic.w	r2, r2, #4
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	619a      	str	r2, [r3, #24]
      break;
 8003472:	e0a5      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fb6c 	bl	8003b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	699a      	ldr	r2, [r3, #24]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6999      	ldr	r1, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	021a      	lsls	r2, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	619a      	str	r2, [r3, #24]
      break;
 80034b4:	e084      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fbcb 	bl	8003c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f042 0208 	orr.w	r2, r2, #8
 80034d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f022 0204 	bic.w	r2, r2, #4
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	61da      	str	r2, [r3, #28]
      break;
 80034f4:	e064      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 fc29 	bl	8003d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69da      	ldr	r2, [r3, #28]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69d9      	ldr	r1, [r3, #28]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	021a      	lsls	r2, r3, #8
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	61da      	str	r2, [r3, #28]
      break;
 8003536:	e043      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fc6c 	bl	8003e1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0208 	orr.w	r2, r2, #8
 8003552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0204 	bic.w	r2, r2, #4
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003576:	e023      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 fcaa 	bl	8003ed8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003592:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	021a      	lsls	r2, r3, #8
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
      break;
 80035be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d101      	bne.n	80035f0 <HAL_TIM_ConfigClockSource+0x1c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	e0b6      	b.n	800375e <HAL_TIM_ConfigClockSource+0x18a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800361a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362c:	d03e      	beq.n	80036ac <HAL_TIM_ConfigClockSource+0xd8>
 800362e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003632:	f200 8087 	bhi.w	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363a:	f000 8086 	beq.w	800374a <HAL_TIM_ConfigClockSource+0x176>
 800363e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003642:	d87f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003644:	2b70      	cmp	r3, #112	@ 0x70
 8003646:	d01a      	beq.n	800367e <HAL_TIM_ConfigClockSource+0xaa>
 8003648:	2b70      	cmp	r3, #112	@ 0x70
 800364a:	d87b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800364c:	2b60      	cmp	r3, #96	@ 0x60
 800364e:	d050      	beq.n	80036f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003650:	2b60      	cmp	r3, #96	@ 0x60
 8003652:	d877      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003654:	2b50      	cmp	r3, #80	@ 0x50
 8003656:	d03c      	beq.n	80036d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003658:	2b50      	cmp	r3, #80	@ 0x50
 800365a:	d873      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800365c:	2b40      	cmp	r3, #64	@ 0x40
 800365e:	d058      	beq.n	8003712 <HAL_TIM_ConfigClockSource+0x13e>
 8003660:	2b40      	cmp	r3, #64	@ 0x40
 8003662:	d86f      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003664:	2b30      	cmp	r3, #48	@ 0x30
 8003666:	d064      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003668:	2b30      	cmp	r3, #48	@ 0x30
 800366a:	d86b      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 800366c:	2b20      	cmp	r3, #32
 800366e:	d060      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003670:	2b20      	cmp	r3, #32
 8003672:	d867      	bhi.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05c      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 8003678:	2b10      	cmp	r3, #16
 800367a:	d05a      	beq.n	8003732 <HAL_TIM_ConfigClockSource+0x15e>
 800367c:	e062      	b.n	8003744 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800368e:	f000 fcfd 	bl	800408c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	609a      	str	r2, [r3, #8]
      break;
 80036aa:	e04f      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036bc:	f000 fce6 	bl	800408c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036ce:	609a      	str	r2, [r3, #8]
      break;
 80036d0:	e03c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	461a      	mov	r2, r3
 80036e0:	f000 fc5a 	bl	8003f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2150      	movs	r1, #80	@ 0x50
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fcb3 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 80036f0:	e02c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036fe:	461a      	mov	r2, r3
 8003700:	f000 fc79 	bl	8003ff6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2160      	movs	r1, #96	@ 0x60
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fca3 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003710:	e01c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800371e:	461a      	mov	r2, r3
 8003720:	f000 fc3a 	bl	8003f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2140      	movs	r1, #64	@ 0x40
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fc93 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003730:	e00c      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4619      	mov	r1, r3
 800373c:	4610      	mov	r0, r2
 800373e:	f000 fc8a 	bl	8004056 <TIM_ITRx_SetConfig>
      break;
 8003742:	e003      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
      break;
 8003748:	e000      	b.n	800374c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800374a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800375c:	7bfb      	ldrb	r3, [r7, #15]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003782:	bf00      	nop
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b084      	sub	sp, #16
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d107      	bne.n	80037ca <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037c8:	e02a      	b.n	8003820 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2202      	movs	r2, #2
 80037d8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e2:	e01d      	b.n	8003820 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d107      	bne.n	80037fe <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2204      	movs	r2, #4
 80037f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037fc:	e010      	b.n	8003820 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d107      	bne.n	8003818 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2208      	movs	r2, #8
 800380c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003816:	e003      	b.n	8003820 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff ffb4 	bl	800378e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	771a      	strb	r2, [r3, #28]
}
 800382c:	bf00      	nop
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	429a      	cmp	r2, r3
 800384a:	d10b      	bne.n	8003864 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d136      	bne.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003862:	e031      	b.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	429a      	cmp	r2, r3
 800386c:	d10b      	bne.n	8003886 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d125      	bne.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003884:	e020      	b.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	429a      	cmp	r2, r3
 800388e:	d10b      	bne.n	80038a8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2204      	movs	r2, #4
 8003894:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d114      	bne.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a6:	e00f      	b.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10a      	bne.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2208      	movs	r2, #8
 80038b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ff4c 	bl	8003766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d103      	bne.n	80038fc <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2201      	movs	r2, #1
 80038f8:	771a      	strb	r2, [r3, #28]
 80038fa:	e019      	b.n	8003930 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d103      	bne.n	800390e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2202      	movs	r2, #2
 800390a:	771a      	strb	r2, [r3, #28]
 800390c:	e010      	b.n	8003930 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	429a      	cmp	r2, r3
 8003916:	d103      	bne.n	8003920 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2204      	movs	r2, #4
 800391c:	771a      	strb	r2, [r3, #28]
 800391e:	e007      	b.n	8003930 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	d102      	bne.n	8003930 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2208      	movs	r2, #8
 800392e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff22 	bl	800377a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <TIM_Base_SetConfig+0xf4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0x28>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0x28>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <TIM_Base_SetConfig+0xf8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d108      	bne.n	800397e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a2d      	ldr	r2, [pc, #180]	@ (8003a38 <TIM_Base_SetConfig+0xf4>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <TIM_Base_SetConfig+0x6a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800398c:	d00f      	beq.n	80039ae <TIM_Base_SetConfig+0x6a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a2a      	ldr	r2, [pc, #168]	@ (8003a3c <TIM_Base_SetConfig+0xf8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00b      	beq.n	80039ae <TIM_Base_SetConfig+0x6a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a29      	ldr	r2, [pc, #164]	@ (8003a40 <TIM_Base_SetConfig+0xfc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_Base_SetConfig+0x6a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a28      	ldr	r2, [pc, #160]	@ (8003a44 <TIM_Base_SetConfig+0x100>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_Base_SetConfig+0x6a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a27      	ldr	r2, [pc, #156]	@ (8003a48 <TIM_Base_SetConfig+0x104>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a14      	ldr	r2, [pc, #80]	@ (8003a38 <TIM_Base_SetConfig+0xf4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <TIM_Base_SetConfig+0xc0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a14      	ldr	r2, [pc, #80]	@ (8003a40 <TIM_Base_SetConfig+0xfc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_Base_SetConfig+0xc0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a13      	ldr	r2, [pc, #76]	@ (8003a44 <TIM_Base_SetConfig+0x100>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_Base_SetConfig+0xc0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <TIM_Base_SetConfig+0x104>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d103      	bne.n	8003a0c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d105      	bne.n	8003a2a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f023 0201 	bic.w	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40012c00 	.word	0x40012c00
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40014400 	.word	0x40014400
 8003a48:	40014800 	.word	0x40014800

08003a4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f023 0201 	bic.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 0302 	bic.w	r3, r3, #2
 8003a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a28      	ldr	r2, [pc, #160]	@ (8003b48 <TIM_OC1_SetConfig+0xfc>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x78>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <TIM_OC1_SetConfig+0x100>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x78>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a26      	ldr	r2, [pc, #152]	@ (8003b50 <TIM_OC1_SetConfig+0x104>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x78>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a25      	ldr	r2, [pc, #148]	@ (8003b54 <TIM_OC1_SetConfig+0x108>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10c      	bne.n	8003ade <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0308 	bic.w	r3, r3, #8
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a19      	ldr	r2, [pc, #100]	@ (8003b48 <TIM_OC1_SetConfig+0xfc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_OC1_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <TIM_OC1_SetConfig+0x100>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC1_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <TIM_OC1_SetConfig+0x104>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC1_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a16      	ldr	r2, [pc, #88]	@ (8003b54 <TIM_OC1_SetConfig+0x108>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d111      	bne.n	8003b22 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	621a      	str	r2, [r3, #32]
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40012c00 	.word	0x40012c00
 8003b4c:	40014000 	.word	0x40014000
 8003b50:	40014400 	.word	0x40014400
 8003b54:	40014800 	.word	0x40014800

08003b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	f023 0210 	bic.w	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	021b      	lsls	r3, r3, #8
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0320 	bic.w	r3, r3, #32
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a24      	ldr	r2, [pc, #144]	@ (8003c48 <TIM_OC2_SetConfig+0xf0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10d      	bne.n	8003bd8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <TIM_OC2_SetConfig+0xf0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xa0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <TIM_OC2_SetConfig+0xf4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xa0>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a19      	ldr	r2, [pc, #100]	@ (8003c50 <TIM_OC2_SetConfig+0xf8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0xa0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <TIM_OC2_SetConfig+0xfc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d113      	bne.n	8003c20 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfe:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c06:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	621a      	str	r2, [r3, #32]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	@ (8003d44 <TIM_OC3_SetConfig+0xec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d10d      	bne.n	8003cd6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cd4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d44 <TIM_OC3_SetConfig+0xec>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_OC3_SetConfig+0x9e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a19      	ldr	r2, [pc, #100]	@ (8003d48 <TIM_OC3_SetConfig+0xf0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_OC3_SetConfig+0x9e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a18      	ldr	r2, [pc, #96]	@ (8003d4c <TIM_OC3_SetConfig+0xf4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC3_SetConfig+0x9e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <TIM_OC3_SetConfig+0xf8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	021b      	lsls	r3, r3, #8
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a16      	ldr	r2, [pc, #88]	@ (8003e0c <TIM_OC4_SetConfig+0xb8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00b      	beq.n	8003dd0 <TIM_OC4_SetConfig+0x7c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a15      	ldr	r2, [pc, #84]	@ (8003e10 <TIM_OC4_SetConfig+0xbc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d007      	beq.n	8003dd0 <TIM_OC4_SetConfig+0x7c>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a14      	ldr	r2, [pc, #80]	@ (8003e14 <TIM_OC4_SetConfig+0xc0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC4_SetConfig+0x7c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a13      	ldr	r2, [pc, #76]	@ (8003e18 <TIM_OC4_SetConfig+0xc4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d109      	bne.n	8003de4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	019b      	lsls	r3, r3, #6
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	621a      	str	r2, [r3, #32]
}
 8003dfe:	bf00      	nop
 8003e00:	371c      	adds	r7, #28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40014000 	.word	0x40014000
 8003e14:	40014400 	.word	0x40014400
 8003e18:	40014800 	.word	0x40014800

08003e1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	@ (8003ec8 <TIM_OC5_SetConfig+0xac>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_OC5_SetConfig+0x72>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	@ (8003ecc <TIM_OC5_SetConfig+0xb0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_OC5_SetConfig+0x72>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a13      	ldr	r2, [pc, #76]	@ (8003ed0 <TIM_OC5_SetConfig+0xb4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_OC5_SetConfig+0x72>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a12      	ldr	r2, [pc, #72]	@ (8003ed4 <TIM_OC5_SetConfig+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d109      	bne.n	8003ea2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	40014800 	.word	0x40014800

08003ed8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	051b      	lsls	r3, r3, #20
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a16      	ldr	r2, [pc, #88]	@ (8003f88 <TIM_OC6_SetConfig+0xb0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00b      	beq.n	8003f4c <TIM_OC6_SetConfig+0x74>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a15      	ldr	r2, [pc, #84]	@ (8003f8c <TIM_OC6_SetConfig+0xb4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_OC6_SetConfig+0x74>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a14      	ldr	r2, [pc, #80]	@ (8003f90 <TIM_OC6_SetConfig+0xb8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_OC6_SetConfig+0x74>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <TIM_OC6_SetConfig+0xbc>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d109      	bne.n	8003f60 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	029b      	lsls	r3, r3, #10
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800

08003f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f023 030a 	bic.w	r3, r3, #10
 8003fd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	621a      	str	r2, [r3, #32]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr

08003ff6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b087      	sub	sp, #28
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	f023 0210 	bic.w	r2, r3, #16
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	031b      	lsls	r3, r3, #12
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004032:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800406c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	f043 0307 	orr.w	r3, r3, #7
 8004078:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	609a      	str	r2, [r3, #8]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	021a      	lsls	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	609a      	str	r2, [r3, #8]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1a      	ldr	r2, [r3, #32]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1a      	ldr	r2, [r3, #32]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e054      	b.n	80041da <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a24      	ldr	r2, [pc, #144]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004160:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a17      	ldr	r2, [pc, #92]	@ (80041e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00e      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004198:	d009      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a13      	ldr	r2, [pc, #76]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d004      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a11      	ldr	r2, [pc, #68]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d10c      	bne.n	80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4313      	orrs	r3, r2
 80041be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40012c00 	.word	0x40012c00
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40014000 	.word	0x40014000

080041f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004208:	2b01      	cmp	r3, #1
 800420a:	d101      	bne.n	8004210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800420c:	2302      	movs	r3, #2
 800420e:	e060      	b.n	80042d2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	041b      	lsls	r3, r3, #16
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d115      	bne.n	80042c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	051b      	lsls	r3, r3, #20
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00

080042e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e040      	b.n	8004378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fc fcb0 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	@ 0x24
 8004310:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f95e 	bl	80045ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f825 	bl	8004380 <UART_SetConfig>
 8004336:	4603      	mov	r3, r0
 8004338:	2b01      	cmp	r3, #1
 800433a:	d101      	bne.n	8004340 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01b      	b.n	8004378 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800434e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800435e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f9dd 	bl	8004730 <UART_CheckIdleState>
 8004376:	4603      	mov	r3, r0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b8a      	ldr	r3, [pc, #552]	@ (80045d4 <UART_SetConfig+0x254>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6812      	ldr	r2, [r2, #0]
 80043b2:	6979      	ldr	r1, [r7, #20]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a78      	ldr	r2, [pc, #480]	@ (80045d8 <UART_SetConfig+0x258>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d120      	bne.n	800443e <UART_SetConfig+0xbe>
 80043fc:	4b77      	ldr	r3, [pc, #476]	@ (80045dc <UART_SetConfig+0x25c>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b03      	cmp	r3, #3
 8004406:	d817      	bhi.n	8004438 <UART_SetConfig+0xb8>
 8004408:	a201      	add	r2, pc, #4	@ (adr r2, 8004410 <UART_SetConfig+0x90>)
 800440a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440e:	bf00      	nop
 8004410:	08004421 	.word	0x08004421
 8004414:	0800442d 	.word	0x0800442d
 8004418:	08004433 	.word	0x08004433
 800441c:	08004427 	.word	0x08004427
 8004420:	2300      	movs	r3, #0
 8004422:	77fb      	strb	r3, [r7, #31]
 8004424:	e01d      	b.n	8004462 <UART_SetConfig+0xe2>
 8004426:	2302      	movs	r3, #2
 8004428:	77fb      	strb	r3, [r7, #31]
 800442a:	e01a      	b.n	8004462 <UART_SetConfig+0xe2>
 800442c:	2304      	movs	r3, #4
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e017      	b.n	8004462 <UART_SetConfig+0xe2>
 8004432:	2308      	movs	r3, #8
 8004434:	77fb      	strb	r3, [r7, #31]
 8004436:	e014      	b.n	8004462 <UART_SetConfig+0xe2>
 8004438:	2310      	movs	r3, #16
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e011      	b.n	8004462 <UART_SetConfig+0xe2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a67      	ldr	r2, [pc, #412]	@ (80045e0 <UART_SetConfig+0x260>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d102      	bne.n	800444e <UART_SetConfig+0xce>
 8004448:	2300      	movs	r3, #0
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e009      	b.n	8004462 <UART_SetConfig+0xe2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a64      	ldr	r2, [pc, #400]	@ (80045e4 <UART_SetConfig+0x264>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d102      	bne.n	800445e <UART_SetConfig+0xde>
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e001      	b.n	8004462 <UART_SetConfig+0xe2>
 800445e:	2310      	movs	r3, #16
 8004460:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800446a:	d15a      	bne.n	8004522 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800446c:	7ffb      	ldrb	r3, [r7, #31]
 800446e:	2b08      	cmp	r3, #8
 8004470:	d827      	bhi.n	80044c2 <UART_SetConfig+0x142>
 8004472:	a201      	add	r2, pc, #4	@ (adr r2, 8004478 <UART_SetConfig+0xf8>)
 8004474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c3 	.word	0x080044c3
 8004488:	080044b3 	.word	0x080044b3
 800448c:	080044c3 	.word	0x080044c3
 8004490:	080044c3 	.word	0x080044c3
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044bb 	.word	0x080044bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800449c:	f7fe fb5e 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 80044a0:	61b8      	str	r0, [r7, #24]
        break;
 80044a2:	e013      	b.n	80044cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7fe fb7c 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 80044a8:	61b8      	str	r0, [r7, #24]
        break;
 80044aa:	e00f      	b.n	80044cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ac:	4b4e      	ldr	r3, [pc, #312]	@ (80045e8 <UART_SetConfig+0x268>)
 80044ae:	61bb      	str	r3, [r7, #24]
        break;
 80044b0:	e00c      	b.n	80044cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b2:	f7fe faf3 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 80044b6:	61b8      	str	r0, [r7, #24]
        break;
 80044b8:	e008      	b.n	80044cc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044be:	61bb      	str	r3, [r7, #24]
        break;
 80044c0:	e004      	b.n	80044cc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	77bb      	strb	r3, [r7, #30]
        break;
 80044ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d074      	beq.n	80045bc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	005a      	lsls	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	085b      	lsrs	r3, r3, #1
 80044dc:	441a      	add	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	2b0f      	cmp	r3, #15
 80044ec:	d916      	bls.n	800451c <UART_SetConfig+0x19c>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d212      	bcs.n	800451c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f023 030f 	bic.w	r3, r3, #15
 80044fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b29a      	uxth	r2, r3
 800450c:	89fb      	ldrh	r3, [r7, #14]
 800450e:	4313      	orrs	r3, r2
 8004510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	89fa      	ldrh	r2, [r7, #14]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	e04f      	b.n	80045bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	77bb      	strb	r3, [r7, #30]
 8004520:	e04c      	b.n	80045bc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004522:	7ffb      	ldrb	r3, [r7, #31]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d828      	bhi.n	800457a <UART_SetConfig+0x1fa>
 8004528:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <UART_SetConfig+0x1b0>)
 800452a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452e:	bf00      	nop
 8004530:	08004555 	.word	0x08004555
 8004534:	0800455d 	.word	0x0800455d
 8004538:	08004565 	.word	0x08004565
 800453c:	0800457b 	.word	0x0800457b
 8004540:	0800456b 	.word	0x0800456b
 8004544:	0800457b 	.word	0x0800457b
 8004548:	0800457b 	.word	0x0800457b
 800454c:	0800457b 	.word	0x0800457b
 8004550:	08004573 	.word	0x08004573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004554:	f7fe fb02 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8004558:	61b8      	str	r0, [r7, #24]
        break;
 800455a:	e013      	b.n	8004584 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800455c:	f7fe fb20 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004560:	61b8      	str	r0, [r7, #24]
        break;
 8004562:	e00f      	b.n	8004584 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004564:	4b20      	ldr	r3, [pc, #128]	@ (80045e8 <UART_SetConfig+0x268>)
 8004566:	61bb      	str	r3, [r7, #24]
        break;
 8004568:	e00c      	b.n	8004584 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800456a:	f7fe fa97 	bl	8002a9c <HAL_RCC_GetSysClockFreq>
 800456e:	61b8      	str	r0, [r7, #24]
        break;
 8004570:	e008      	b.n	8004584 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004576:	61bb      	str	r3, [r7, #24]
        break;
 8004578:	e004      	b.n	8004584 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800457a:	2300      	movs	r3, #0
 800457c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	77bb      	strb	r3, [r7, #30]
        break;
 8004582:	bf00      	nop
    }

    if (pclk != 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d018      	beq.n	80045bc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085a      	lsrs	r2, r3, #1
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b0f      	cmp	r3, #15
 80045a2:	d909      	bls.n	80045b8 <UART_SetConfig+0x238>
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045aa:	d205      	bcs.n	80045b8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	e001      	b.n	80045bc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	efff69f3 	.word	0xefff69f3
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40004400 	.word	0x40004400
 80045e4:	40004800 	.word	0x40004800
 80045e8:	007a1200 	.word	0x007a1200

080045ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00a      	beq.n	800465a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	f003 0310 	and.w	r3, r3, #16
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01a      	beq.n	8004702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ea:	d10a      	bne.n	8004702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	605a      	str	r2, [r3, #4]
  }
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b098      	sub	sp, #96	@ 0x60
 8004734:	af02      	add	r7, sp, #8
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004740:	f7fc fba8 	bl	8000e94 <HAL_GetTick>
 8004744:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b08      	cmp	r3, #8
 8004752:	d12e      	bne.n	80047b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004754:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f88c 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d021      	beq.n	80047b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800477c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004782:	653b      	str	r3, [r7, #80]	@ 0x50
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800478c:	647b      	str	r3, [r7, #68]	@ 0x44
 800478e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004792:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800479a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e6      	bne.n	800476e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e062      	b.n	8004878 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d149      	bne.n	8004854 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047c8:	2200      	movs	r2, #0
 80047ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f856 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d03c      	beq.n	8004854 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e2:	e853 3f00 	ldrex	r3, [r3]
 80047e6:	623b      	str	r3, [r7, #32]
   return(result);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	461a      	mov	r2, r3
 80047f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004800:	e841 2300 	strex	r3, r2, [r1]
 8004804:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e6      	bne.n	80047da <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3308      	adds	r3, #8
 8004812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	60fb      	str	r3, [r7, #12]
   return(result);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800482c:	61fa      	str	r2, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	617b      	str	r3, [r7, #20]
   return(result);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e011      	b.n	8004878 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3758      	adds	r7, #88	@ 0x58
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	e04f      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004898:	d04b      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489a:	f7fc fafb 	bl	8000e94 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d302      	bcc.n	80048b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e04e      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0304 	and.w	r3, r3, #4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d037      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b80      	cmp	r3, #128	@ 0x80
 80048c6:	d034      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b40      	cmp	r3, #64	@ 0x40
 80048cc:	d031      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	f003 0308 	and.w	r3, r3, #8
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d110      	bne.n	80048fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2208      	movs	r2, #8
 80048e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f838 	bl	800495a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2208      	movs	r2, #8
 80048ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e029      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490c:	d111      	bne.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004916:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f81e 	bl	800495a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e00f      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	429a      	cmp	r2, r3
 800494e:	d0a0      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800495a:	b480      	push	{r7}
 800495c:	b095      	sub	sp, #84	@ 0x54
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004980:	643b      	str	r3, [r7, #64]	@ 0x40
 8004982:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e6      	bne.n	8004962 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6a3b      	ldr	r3, [r7, #32]
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3308      	adds	r3, #8
 80049b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e5      	bne.n	8004994 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d118      	bne.n	8004a02 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	e853 3f00 	ldrex	r3, [r3]
 80049dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0310 	bic.w	r3, r3, #16
 80049e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	6979      	ldr	r1, [r7, #20]
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	e841 2300 	strex	r3, r2, [r1]
 80049fa:	613b      	str	r3, [r7, #16]
   return(result);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1e6      	bne.n	80049d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a16:	bf00      	nop
 8004a18:	3754      	adds	r7, #84	@ 0x54
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <memset>:
 8004a22:	4402      	add	r2, r0
 8004a24:	4603      	mov	r3, r0
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d100      	bne.n	8004a2c <memset+0xa>
 8004a2a:	4770      	bx	lr
 8004a2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a30:	e7f9      	b.n	8004a26 <memset+0x4>
	...

08004a34 <__libc_init_array>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4d0d      	ldr	r5, [pc, #52]	@ (8004a6c <__libc_init_array+0x38>)
 8004a38:	4c0d      	ldr	r4, [pc, #52]	@ (8004a70 <__libc_init_array+0x3c>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	2600      	movs	r6, #0
 8004a40:	42a6      	cmp	r6, r4
 8004a42:	d109      	bne.n	8004a58 <__libc_init_array+0x24>
 8004a44:	4d0b      	ldr	r5, [pc, #44]	@ (8004a74 <__libc_init_array+0x40>)
 8004a46:	4c0c      	ldr	r4, [pc, #48]	@ (8004a78 <__libc_init_array+0x44>)
 8004a48:	f000 f818 	bl	8004a7c <_init>
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	10a4      	asrs	r4, r4, #2
 8004a50:	2600      	movs	r6, #0
 8004a52:	42a6      	cmp	r6, r4
 8004a54:	d105      	bne.n	8004a62 <__libc_init_array+0x2e>
 8004a56:	bd70      	pop	{r4, r5, r6, pc}
 8004a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5c:	4798      	blx	r3
 8004a5e:	3601      	adds	r6, #1
 8004a60:	e7ee      	b.n	8004a40 <__libc_init_array+0xc>
 8004a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a66:	4798      	blx	r3
 8004a68:	3601      	adds	r6, #1
 8004a6a:	e7f2      	b.n	8004a52 <__libc_init_array+0x1e>
 8004a6c:	08004acc 	.word	0x08004acc
 8004a70:	08004acc 	.word	0x08004acc
 8004a74:	08004acc 	.word	0x08004acc
 8004a78:	08004ad0 	.word	0x08004ad0

08004a7c <_init>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr

08004a88 <_fini>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	bf00      	nop
 8004a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a8e:	bc08      	pop	{r3}
 8004a90:	469e      	mov	lr, r3
 8004a92:	4770      	bx	lr
