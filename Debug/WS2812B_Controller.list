
WS2812B_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048a0  080048a0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a0  080048a0  000058a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048a4  080048a4  000058a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          00000138  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000144  20000144  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e346  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f94  00000000  00000000  00014382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  00016318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e1  00000000  00000000  00016fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abae  00000000  00000000  00017991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fafe  00000000  00000000  0003253f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0f09  00000000  00000000  0004203d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e2f46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000034ac  00000000  00000000  000e2f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000e6438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004850 	.word	0x08004850

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004850 	.word	0x08004850

080001c8 <check_color_bounds>:
 *      Author: matthew
 */
#include "main.h"
#include "led_controller.h"

static void check_color_bounds(int* green, int* red, int* blue) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
	if(*green > 255) *green = 255;
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	2bff      	cmp	r3, #255	@ 0xff
 80001da:	dd03      	ble.n	80001e4 <check_color_bounds+0x1c>
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	22ff      	movs	r2, #255	@ 0xff
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	e006      	b.n	80001f2 <check_color_bounds+0x2a>
	else if (*green < 0) *green = 0;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	da02      	bge.n	80001f2 <check_color_bounds+0x2a>
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]

	if(*red > 255) *red = 255;
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2bff      	cmp	r3, #255	@ 0xff
 80001f8:	dd03      	ble.n	8000202 <check_color_bounds+0x3a>
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	22ff      	movs	r2, #255	@ 0xff
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	e006      	b.n	8000210 <check_color_bounds+0x48>
	else if (*red < 0) *red = 0;
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	da02      	bge.n	8000210 <check_color_bounds+0x48>
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]

	if(*blue > 255) *blue = 255;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2bff      	cmp	r3, #255	@ 0xff
 8000216:	dd03      	ble.n	8000220 <check_color_bounds+0x58>
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	22ff      	movs	r2, #255	@ 0xff
 800021c:	601a      	str	r2, [r3, #0]
	else if (*blue < 0) *blue = 0;
}
 800021e:	e006      	b.n	800022e <check_color_bounds+0x66>
	else if (*blue < 0) *blue = 0;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2b00      	cmp	r3, #0
 8000226:	da02      	bge.n	800022e <check_color_bounds+0x66>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr

0800023a <set_color>:

static void set_color(int green, int red, int blue, int led_idx, int led_colors[NUM_LEDS][3]) {
 800023a:	b580      	push	{r7, lr}
 800023c:	b084      	sub	sp, #16
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
 8000246:	603b      	str	r3, [r7, #0]
	// Verify all color values are between 0 and 255 and led_num is in bounds
	check_color_bounds(&green, &red, &blue);
 8000248:	1d3a      	adds	r2, r7, #4
 800024a:	f107 0108 	add.w	r1, r7, #8
 800024e:	f107 030c 	add.w	r3, r7, #12
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ffb8 	bl	80001c8 <check_color_bounds>
	if (led_idx > NUM_LEDS - 1) {
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2b3b      	cmp	r3, #59	@ 0x3b
 800025c:	dd01      	ble.n	8000262 <set_color+0x28>
		led_idx = NUM_LEDS - 1;
 800025e:	233b      	movs	r3, #59	@ 0x3b
 8000260:	603b      	str	r3, [r7, #0]
	}

	led_colors[led_idx][0] = green;
 8000262:	683a      	ldr	r2, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	4413      	add	r3, r2
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	461a      	mov	r2, r3
 800026e:	69bb      	ldr	r3, [r7, #24]
 8000270:	4413      	add	r3, r2
 8000272:	68fa      	ldr	r2, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]
	led_colors[led_idx][1] = red;
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	4613      	mov	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4413      	add	r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	461a      	mov	r2, r3
 8000282:	69bb      	ldr	r3, [r7, #24]
 8000284:	4413      	add	r3, r2
 8000286:	68ba      	ldr	r2, [r7, #8]
 8000288:	605a      	str	r2, [r3, #4]
	led_colors[led_idx][2] = blue;
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4413      	add	r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	461a      	mov	r2, r3
 8000296:	69bb      	ldr	r3, [r7, #24]
 8000298:	4413      	add	r3, r2
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]
}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
	...

080002a8 <send_data>:

static void send_data(int led_colors[NUM_LEDS][3]) {
 80002a8:	b580      	push	{r7, lr}
 80002aa:	f5ad 6d3c 	sub.w	sp, sp, #3008	@ 0xbc0
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002b4:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 80002b8:	6018      	str	r0, [r3, #0]
	uint16_t pwm_data[(DATA_SIZE * NUM_LEDS) + RST_CODE_LENGTH];
	// each color is 3 bytes = 24 bits (Green byte | Red byte | Blue byte for WS2812b)
	uint32_t color = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 3bac 	str.w	r3, [r7, #2988]	@ 0xbac
	int running_idx = 0; // accumulating index to continually add to pwm_data
 80002c0:	2300      	movs	r3, #0
 80002c2:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc

	for(int j = 0; j < NUM_LEDS; j++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	f8c7 3bb8 	str.w	r3, [r7, #3000]	@ 0xbb8
 80002cc:	e064      	b.n	8000398 <send_data+0xf0>
		// create GRB color from each byte of led_colors
		color = (led_colors[j][0] << 16) | (led_colors[j][1] << 8) | (led_colors[j][2]);
 80002ce:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 80002d2:	4613      	mov	r3, r2
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	4413      	add	r3, r2
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	461a      	mov	r2, r3
 80002dc:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002e0:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4413      	add	r3, r2
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	0419      	lsls	r1, r3, #16
 80002ec:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	461a      	mov	r2, r3
 80002fa:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80002fe:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4413      	add	r3, r2
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	4319      	orrs	r1, r3
 800030c:	f8d7 2bb8 	ldr.w	r2, [r7, #3000]	@ 0xbb8
 8000310:	4613      	mov	r3, r2
 8000312:	005b      	lsls	r3, r3, #1
 8000314:	4413      	add	r3, r2
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	461a      	mov	r2, r3
 800031a:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 800031e:	f6a3 33bc 	subw	r3, r3, #3004	@ 0xbbc
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4413      	add	r3, r2
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	430b      	orrs	r3, r1
 800032a:	f8c7 3bac 	str.w	r3, [r7, #2988]	@ 0xbac

		// Put a code 1 into pwm stream if bit = 1, and code 0 if bit = 0
		for(int i = DATA_SIZE - 1; i >= 0; i--) {
 800032e:	2317      	movs	r3, #23
 8000330:	f8c7 3bb4 	str.w	r3, [r7, #2996]	@ 0xbb4
 8000334:	e027      	b.n	8000386 <send_data+0xde>
			if(color & (1 << i)) {
 8000336:	2201      	movs	r2, #1
 8000338:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	461a      	mov	r2, r3
 8000342:	f8d7 3bac 	ldr.w	r3, [r7, #2988]	@ 0xbac
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d009      	beq.n	8000360 <send_data+0xb8>
				pwm_data[running_idx] = CODE_1_COMPARE;
 800034c:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000350:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8000354:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 8000358:	2133      	movs	r1, #51	@ 0x33
 800035a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800035e:	e008      	b.n	8000372 <send_data+0xca>
			}
			else {
				pwm_data[running_idx] = CODE_0_COMPARE;
 8000360:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000364:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 8000368:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 800036c:	211a      	movs	r1, #26
 800036e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			running_idx++;
 8000372:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 8000376:	3301      	adds	r3, #1
 8000378:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc
		for(int i = DATA_SIZE - 1; i >= 0; i--) {
 800037c:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 8000380:	3b01      	subs	r3, #1
 8000382:	f8c7 3bb4 	str.w	r3, [r7, #2996]	@ 0xbb4
 8000386:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800038a:	2b00      	cmp	r3, #0
 800038c:	dad3      	bge.n	8000336 <send_data+0x8e>
	for(int j = 0; j < NUM_LEDS; j++) {
 800038e:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 8000392:	3301      	adds	r3, #1
 8000394:	f8c7 3bb8 	str.w	r3, [r7, #3000]	@ 0xbb8
 8000398:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 800039c:	2b3b      	cmp	r3, #59	@ 0x3b
 800039e:	dd96      	ble.n	80002ce <send_data+0x26>
		}
	}

	// Ensure the reset code is implemented -> should go low for > 50us
	for(int i = 0; i < RST_CODE_LENGTH; i++) {
 80003a0:	2300      	movs	r3, #0
 80003a2:	f8c7 3bb0 	str.w	r3, [r7, #2992]	@ 0xbb0
 80003a6:	e012      	b.n	80003ce <send_data+0x126>
		pwm_data[running_idx] = 0;
 80003a8:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 80003ac:	f6a3 33b8 	subw	r3, r3, #3000	@ 0xbb8
 80003b0:	f8d7 2bbc 	ldr.w	r2, [r7, #3004]	@ 0xbbc
 80003b4:	2100      	movs	r1, #0
 80003b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		running_idx++;
 80003ba:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 80003be:	3301      	adds	r3, #1
 80003c0:	f8c7 3bbc 	str.w	r3, [r7, #3004]	@ 0xbbc
	for(int i = 0; i < RST_CODE_LENGTH; i++) {
 80003c4:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 80003c8:	3301      	adds	r3, #1
 80003ca:	f8c7 3bb0 	str.w	r3, [r7, #2992]	@ 0xbb0
 80003ce:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 80003d2:	2b31      	cmp	r3, #49	@ 0x31
 80003d4:	dde8      	ble.n	80003a8 <send_data+0x100>
	}

	// Start the DMA
	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_2, (uint32_t*) pwm_data, DATA_SIZE * NUM_LEDS + RST_CODE_LENGTH);
 80003d6:	f107 0208 	add.w	r2, r7, #8
 80003da:	f240 53d2 	movw	r3, #1490	@ 0x5d2
 80003de:	2104      	movs	r1, #4
 80003e0:	4803      	ldr	r0, [pc, #12]	@ (80003f0 <send_data+0x148>)
 80003e2:	f002 fcc7 	bl	8002d74 <HAL_TIM_PWM_Start_DMA>
}
 80003e6:	bf00      	nop
 80003e8:	f507 673c 	add.w	r7, r7, #3008	@ 0xbc0
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028

080003f4 <reset_led>:

void reset_led() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	f5ad 7d38 	sub.w	sp, sp, #736	@ 0x2e0
 80003fa:	af02      	add	r7, sp, #8
	int led_colors[NUM_LEDS][3] = {0};
 80003fc:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 8000400:	f5a3 7335 	sub.w	r3, r3, #724	@ 0x2d4
 8000404:	4618      	mov	r0, r3
 8000406:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 800040a:	461a      	mov	r2, r3
 800040c:	2100      	movs	r1, #0
 800040e:	f004 f9f2 	bl	80047f6 <memset>

	for(int i = 0; i < NUM_LEDS; i++) {
 8000412:	2300      	movs	r3, #0
 8000414:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8000418:	e00d      	b.n	8000436 <reset_led+0x42>
		set_color(0, 0, 0, i, led_colors);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	9300      	str	r3, [sp, #0]
 800041e:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	2000      	movs	r0, #0
 8000428:	f7ff ff07 	bl	800023a <set_color>
	for(int i = 0; i < NUM_LEDS; i++) {
 800042c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8000430:	3301      	adds	r3, #1
 8000432:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8000436:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800043a:	2b3b      	cmp	r3, #59	@ 0x3b
 800043c:	dded      	ble.n	800041a <reset_led+0x26>
	}
	send_data(led_colors);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff31 	bl	80002a8 <send_data>
}
 8000446:	bf00      	nop
 8000448:	f507 7736 	add.w	r7, r7, #728	@ 0x2d8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}

08000450 <startup_led>:

void startup_led() {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	fx_led_chaser(255, 255, 255, 15);
 8000454:	230f      	movs	r3, #15
 8000456:	22ff      	movs	r2, #255	@ 0xff
 8000458:	21ff      	movs	r1, #255	@ 0xff
 800045a:	20ff      	movs	r0, #255	@ 0xff
 800045c:	f000 f807 	bl	800046e <fx_led_chaser>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fc0d 	bl	8000c80 <HAL_Delay>
	reset_led();
 8000466:	f7ff ffc5 	bl	80003f4 <reset_led>
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}

0800046e <fx_led_chaser>:

void fx_led_chaser(int g, int r, int b, int speed) {
 800046e:	b590      	push	{r4, r7, lr}
 8000470:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8000474:	af02      	add	r7, sp, #8
 8000476:	f507 743a 	add.w	r4, r7, #744	@ 0x2e8
 800047a:	f5a4 7437 	sub.w	r4, r4, #732	@ 0x2dc
 800047e:	6020      	str	r0, [r4, #0]
 8000480:	f507 703a 	add.w	r0, r7, #744	@ 0x2e8
 8000484:	f5a0 7038 	sub.w	r0, r0, #736	@ 0x2e0
 8000488:	6001      	str	r1, [r0, #0]
 800048a:	f507 713a 	add.w	r1, r7, #744	@ 0x2e8
 800048e:	f5a1 7139 	sub.w	r1, r1, #740	@ 0x2e4
 8000492:	600a      	str	r2, [r1, #0]
 8000494:	f507 723a 	add.w	r2, r7, #744	@ 0x2e8
 8000498:	f5a2 723a 	sub.w	r2, r2, #744	@ 0x2e8
 800049c:	6013      	str	r3, [r2, #0]
	int led_colors[NUM_LEDS][3] = {0};
 800049e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004a2:	f5a3 7336 	sub.w	r3, r3, #728	@ 0x2d8
 80004a6:	4618      	mov	r0, r3
 80004a8:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 80004ac:	461a      	mov	r2, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	f004 f9a1 	bl	80047f6 <memset>


	for(int i = 0; i < NUM_LEDS; i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80004ba:	e038      	b.n	800052e <fx_led_chaser+0xc0>
		set_color(g, r, b, i, led_colors);
 80004bc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004c0:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 80004c4:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004c8:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 80004cc:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 80004d0:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	6809      	ldr	r1, [r1, #0]
 80004e2:	6800      	ldr	r0, [r0, #0]
 80004e4:	f7ff fea9 	bl	800023a <set_color>
		if(i >= 10) {
 80004e8:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004ec:	2b09      	cmp	r3, #9
 80004ee:	dd0c      	ble.n	800050a <fx_led_chaser+0x9c>
			set_color(0, 0, 0, i - 10, led_colors);
 80004f0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80004f4:	f1a3 020a 	sub.w	r2, r3, #10
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	4613      	mov	r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff fe98 	bl	800023a <set_color>
		}
		send_data(led_colors);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff feca 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 8000514:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000518:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fbae 	bl	8000c80 <HAL_Delay>
	for(int i = 0; i < NUM_LEDS; i++) {
 8000524:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000528:	3301      	adds	r3, #1
 800052a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800052e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8000532:	2b3b      	cmp	r3, #59	@ 0x3b
 8000534:	ddc2      	ble.n	80004bc <fx_led_chaser+0x4e>
	}
	for(int i = NUM_LEDS - 10; i >= 0; i--) {
 8000536:	2332      	movs	r3, #50	@ 0x32
 8000538:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 800053c:	e038      	b.n	80005b0 <fx_led_chaser+0x142>
		set_color(g, r, b, i, led_colors);
 800053e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000542:	f5a3 7239 	sub.w	r2, r3, #740	@ 0x2e4
 8000546:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800054a:	f5a3 7138 	sub.w	r1, r3, #736	@ 0x2e0
 800054e:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 8000552:	f5a3 7037 	sub.w	r0, r3, #732	@ 0x2dc
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8000560:	6812      	ldr	r2, [r2, #0]
 8000562:	6809      	ldr	r1, [r1, #0]
 8000564:	6800      	ldr	r0, [r0, #0]
 8000566:	f7ff fe68 	bl	800023a <set_color>
		if(i < NUM_LEDS - 10) {
 800056a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 800056e:	2b31      	cmp	r3, #49	@ 0x31
 8000570:	dc0c      	bgt.n	800058c <fx_led_chaser+0x11e>
			set_color(0, 0, 0, i + 10, led_colors);
 8000572:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 8000576:	f103 020a 	add.w	r2, r3, #10
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	4613      	mov	r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	2100      	movs	r1, #0
 8000586:	2000      	movs	r0, #0
 8000588:	f7ff fe57 	bl	800023a <set_color>
		}
		send_data(led_colors);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe89 	bl	80002a8 <send_data>
		HAL_Delay(speed);
 8000596:	f507 733a 	add.w	r3, r7, #744	@ 0x2e8
 800059a:	f5a3 733a 	sub.w	r3, r3, #744	@ 0x2e8
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fb6d 	bl	8000c80 <HAL_Delay>
	for(int i = NUM_LEDS - 10; i >= 0; i--) {
 80005a6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80005aa:	3b01      	subs	r3, #1
 80005ac:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 80005b0:	f8d7 32e0 	ldr.w	r3, [r7, #736]	@ 0x2e0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dac2      	bge.n	800053e <fx_led_chaser+0xd0>
	}

}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	f507 773b 	add.w	r7, r7, #748	@ 0x2ec
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 faf4 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f814 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f966 	bl	80008a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d4:	f000 f946 	bl	8000864 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005d8:	f000 f914 	bl	8000804 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005dc:	f000 f866 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 80005e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e4:	f000 fb4c 	bl	8000c80 <HAL_Delay>
  startup_led();
 80005e8:	f7ff ff32 	bl	8000450 <startup_led>
  HAL_Delay(1500);
 80005ec:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80005f0:	f000 fb46 	bl	8000c80 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x30>

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	@ 0x58
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000602:	2228      	movs	r2, #40	@ 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f8f5 	bl	80047f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]
 800062a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062c:	2302      	movs	r3, #2
 800062e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2310      	movs	r3, #16
 8000636:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000640:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000644:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064a:	4618      	mov	r0, r3
 800064c:	f000 ff56 	bl	80014fc <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000656:	f000 f947 	bl	80008e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	2102      	movs	r1, #2
 8000676:	4618      	mov	r0, r3
 8000678:	f001 ff7e 	bl	8002578 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000682:	f000 f931 	bl	80008e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000686:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f990 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800069e:	f000 f923 	bl	80008e8 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3758      	adds	r7, #88	@ 0x58
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	@ 0x68
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	222c      	movs	r2, #44	@ 0x2c
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 f885 	bl	80047f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b43      	ldr	r3, [pc, #268]	@ (80007fc <MX_TIM1_Init+0x150>)
 80006ee:	4a44      	ldr	r2, [pc, #272]	@ (8000800 <MX_TIM1_Init+0x154>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f2:	4b42      	ldr	r3, [pc, #264]	@ (80007fc <MX_TIM1_Init+0x150>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <MX_TIM1_Init+0x150>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80-1;
 80006fe:	4b3f      	ldr	r3, [pc, #252]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000700:	224f      	movs	r2, #79	@ 0x4f
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b3d      	ldr	r3, [pc, #244]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_TIM1_Init+0x150>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000716:	4839      	ldr	r0, [pc, #228]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000718:	f002 fa74 	bl	8002c04 <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000722:	f000 f8e1 	bl	80008e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800072a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000730:	4619      	mov	r1, r3
 8000732:	4832      	ldr	r0, [pc, #200]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000734:	f002 fe38 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800073e:	f000 f8d3 	bl	80008e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000742:	482e      	ldr	r0, [pc, #184]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000744:	f002 fab5 	bl	8002cb2 <HAL_TIM_PWM_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800074e:	f000 f8cb 	bl	80008e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000752:	2300      	movs	r3, #0
 8000754:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800075e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000762:	4619      	mov	r1, r3
 8000764:	4825      	ldr	r0, [pc, #148]	@ (80007fc <MX_TIM1_Init+0x150>)
 8000766:	f003 fbc1 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000770:	f000 f8ba 	bl	80008e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000774:	2360      	movs	r3, #96	@ 0x60
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000788:	2300      	movs	r3, #0
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078c:	2300      	movs	r3, #0
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000790:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000794:	2204      	movs	r2, #4
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	@ (80007fc <MX_TIM1_Init+0x150>)
 800079a:	f002 fcf1 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007a4:	f000 f8a0 	bl	80008e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4807      	ldr	r0, [pc, #28]	@ (80007fc <MX_TIM1_Init+0x150>)
 80007de:	f003 fbf3 	bl	8003fc8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80007e8:	f000 f87e 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ec:	4803      	ldr	r0, [pc, #12]	@ (80007fc <MX_TIM1_Init+0x150>)
 80007ee:	f000 f8ef 	bl	80009d0 <HAL_TIM_MspPostInit>

}
 80007f2:	bf00      	nop
 80007f4:	3768      	adds	r7, #104	@ 0x68
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000028 	.word	0x20000028
 8000800:	40012c00 	.word	0x40012c00

08000804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_USART2_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART2_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART2_UART_Init+0x58>)
 8000848:	f003 fc36 	bl	80040b8 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f849 	bl	80008e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b8 	.word	0x200000b8
 8000860:	40004400 	.word	0x40004400

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_DMA_Init+0x38>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <MX_DMA_Init+0x38>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_DMA_Init+0x38>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200d      	movs	r0, #13
 8000888:	f000 faf9 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800088c:	200d      	movs	r0, #13
 800088e:	f000 fb12 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	4a0e      	ldr	r2, [pc, #56]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008b0:	6153      	str	r3, [r2, #20]
 80008b2:	4b0c      	ldr	r3, [pc, #48]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008b4:	695b      	ldr	r3, [r3, #20]
 80008b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008c0:	695b      	ldr	r3, [r3, #20]
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	6153      	str	r3, [r2, #20]
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <MX_GPIO_Init+0x44>)
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40021000 	.word	0x40021000

080008e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <Error_Handler+0x8>

080008f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x44>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x44>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x44>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x44>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	61d3      	str	r3, [r2, #28]
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x44>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a1d      	ldr	r2, [pc, #116]	@ (80009c0 <HAL_TIM_Base_MspInit+0x84>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d133      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_TIM_Base_MspInit+0x88>)
 8000950:	699b      	ldr	r3, [r3, #24]
 8000952:	4a1c      	ldr	r2, [pc, #112]	@ (80009c4 <HAL_TIM_Base_MspInit+0x88>)
 8000954:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000958:	6193      	str	r3, [r2, #24]
 800095a:	4b1a      	ldr	r3, [pc, #104]	@ (80009c4 <HAL_TIM_Base_MspInit+0x88>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA1_Channel3;
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000968:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <HAL_TIM_Base_MspInit+0x90>)
 800096a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800096c:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 800096e:	2210      	movs	r2, #16
 8000970:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000984:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000986:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800098c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.Mode = DMA_NORMAL;
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 800099a:	480b      	ldr	r0, [pc, #44]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 800099c:	f000 faa5 	bl	8000eea <HAL_DMA_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80009a6:	f7ff ff9f 	bl	80008e8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a06      	ldr	r2, [pc, #24]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80009b0:	4a05      	ldr	r2, [pc, #20]	@ (80009c8 <HAL_TIM_Base_MspInit+0x8c>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	40021000 	.word	0x40021000
 80009c8:	20000074 	.word	0x20000074
 80009cc:	40020030 	.word	0x40020030

080009d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <HAL_TIM_MspPostInit+0x68>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d11d      	bne.n	8000a2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a11      	ldr	r2, [pc, #68]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b0f      	ldr	r3, [pc, #60]	@ (8000a3c <HAL_TIM_MspPostInit+0x6c>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = LED_DMA_OUT_Pin;
 8000a0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_DMA_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f000 fbf5 	bl	8001218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a18      	ldr	r2, [pc, #96]	@ (8000ac0 <HAL_UART_MspInit+0x80>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d129      	bne.n	8000ab6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	4a11      	ldr	r2, [pc, #68]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a84:	6153      	str	r3, [r2, #20]
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_UART_MspInit+0x84>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000a92:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa4:	2307      	movs	r3, #7
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ab2:	f000 fbb1 	bl	8001218 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40004400 	.word	0x40004400
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1e:	f000 f88f 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <DMA1_Channel3_IRQHandler+0x10>)
 8000b2e:	f000 fa82 	bl	8001036 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000074 	.word	0x20000074

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b64:	f7ff ffea 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 fe3b 	bl	8004808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fd17 	bl	80005c4 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b98:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	080048a8 	.word	0x080048a8
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	20000144 	.word	0x20000144

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_Init+0x28>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_Init+0x28>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f94f 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff fe90 	bl	80008f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40022000 	.word	0x40022000

08000be0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 f967 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c1c:	f000 f92f 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000140 	.word	0x20000140

08000c68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000140 	.word	0x20000140

08000c80 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cfa:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	60d3      	str	r3, [r2, #12]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db0b      	blt.n	8000d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	f003 021f 	and.w	r2, r3, #31
 8000d44:	4907      	ldr	r1, [pc, #28]	@ (8000d64 <__NVIC_EnableIRQ+0x38>)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000e100 	.word	0xe000e100

08000d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db0a      	blt.n	8000d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	490c      	ldr	r1, [pc, #48]	@ (8000db4 <__NVIC_SetPriority+0x4c>)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	0112      	lsls	r2, r2, #4
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d90:	e00a      	b.n	8000da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4908      	ldr	r1, [pc, #32]	@ (8000db8 <__NVIC_SetPriority+0x50>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	3b04      	subs	r3, #4
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	b2d2      	uxtb	r2, r2
 8000da4:	440b      	add	r3, r1
 8000da6:	761a      	strb	r2, [r3, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000e100 	.word	0xe000e100
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	@ 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f1c3 0307 	rsb	r3, r3, #7
 8000dd6:	2b04      	cmp	r3, #4
 8000dd8:	bf28      	it	cs
 8000dda:	2304      	movcs	r3, #4
 8000ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3304      	adds	r3, #4
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d902      	bls.n	8000dec <NVIC_EncodePriority+0x30>
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	3b03      	subs	r3, #3
 8000dea:	e000      	b.n	8000dee <NVIC_EncodePriority+0x32>
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	401a      	ands	r2, r3
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0e:	43d9      	mvns	r1, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e14:	4313      	orrs	r3, r2
         );
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
	...

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e48:	f7ff ff8e 	bl	8000d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff29 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff3e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff8e 	bl	8000dbc <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5d 	bl	8000d68 <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff31 	bl	8000d2c <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d101      	bne.n	8000f00 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e037      	b.n	8000f70 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000f16:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000f1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f940 	bl	80011d8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
 8000f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d101      	bne.n	8000f98 <HAL_DMA_Start_IT+0x20>
 8000f94:	2302      	movs	r3, #2
 8000f96:	e04a      	b.n	800102e <HAL_DMA_Start_IT+0xb6>
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d13a      	bne.n	8001020 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2202      	movs	r2, #2
 8000fae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f8d4 	bl	800117c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d008      	beq.n	8000fee <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 020e 	orr.w	r2, r2, #14
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e00f      	b.n	800100e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 020a 	orr.w	r2, r2, #10
 8000ffc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0204 	bic.w	r2, r2, #4
 800100c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	e005      	b.n	800102c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001028:	2302      	movs	r3, #2
 800102a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001052:	2204      	movs	r2, #4
 8001054:	409a      	lsls	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d024      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x72>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d01f      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0320 	and.w	r3, r3, #32
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0204 	bic.w	r2, r2, #4
 8001084:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800108e:	2104      	movs	r1, #4
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06a      	beq.n	8001174 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010a6:	e065      	b.n	8001174 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	2202      	movs	r2, #2
 80010ae:	409a      	lsls	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4013      	ands	r3, r2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d02c      	beq.n	8001112 <HAL_DMA_IRQHandler+0xdc>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d027      	beq.n	8001112 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0320 	and.w	r3, r3, #32
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10b      	bne.n	80010e8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 020a 	bic.w	r2, r2, #10
 80010de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010f0:	2102      	movs	r1, #2
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001104:	2b00      	cmp	r3, #0
 8001106:	d035      	beq.n	8001174 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001110:	e030      	b.n	8001174 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	2208      	movs	r2, #8
 8001118:	409a      	lsls	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d028      	beq.n	8001174 <HAL_DMA_IRQHandler+0x13e>
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 020e 	bic.w	r2, r2, #14
 800113a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2201      	movs	r2, #1
 8001150:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2201      	movs	r2, #1
 8001156:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	2b00      	cmp	r3, #0
 8001168:	d004      	beq.n	8001174 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
    }
  }
}
 8001172:	e7ff      	b.n	8001174 <HAL_DMA_IRQHandler+0x13e>
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d108      	bne.n	80011bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011ba:	e007      	b.n	80011cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	60da      	str	r2, [r3, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <DMA_CalcBaseAndBitshift+0x34>)
 80011e8:	4413      	add	r3, r2
 80011ea:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <DMA_CalcBaseAndBitshift+0x38>)
 80011ec:	fba2 2303 	umull	r2, r3, r2, r3
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	009a      	lsls	r2, r3, #2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a06      	ldr	r2, [pc, #24]	@ (8001214 <DMA_CalcBaseAndBitshift+0x3c>)
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	bffdfff8 	.word	0xbffdfff8
 8001210:	cccccccd 	.word	0xcccccccd
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	e14e      	b.n	80014c6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8140 	beq.w	80014c0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d005      	beq.n	8001258 <HAL_GPIO_Init+0x40>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d130      	bne.n	80012ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128e:	2201      	movs	r2, #1
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 0201 	and.w	r2, r3, #1
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d017      	beq.n	80012f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d123      	bne.n	800134a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	08da      	lsrs	r2, r3, #3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3208      	adds	r2, #8
 800130a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	08da      	lsrs	r2, r3, #3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3208      	adds	r2, #8
 8001344:	6939      	ldr	r1, [r7, #16]
 8001346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	2203      	movs	r2, #3
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0203 	and.w	r2, r3, #3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 809a 	beq.w	80014c0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138c:	4b55      	ldr	r3, [pc, #340]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a54      	ldr	r2, [pc, #336]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b52      	ldr	r3, [pc, #328]	@ (80014e4 <HAL_GPIO_Init+0x2cc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a4:	4a50      	ldr	r2, [pc, #320]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	220f      	movs	r2, #15
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013ce:	d013      	beq.n	80013f8 <HAL_GPIO_Init+0x1e0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a46      	ldr	r2, [pc, #280]	@ (80014ec <HAL_GPIO_Init+0x2d4>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d00d      	beq.n	80013f4 <HAL_GPIO_Init+0x1dc>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a45      	ldr	r2, [pc, #276]	@ (80014f0 <HAL_GPIO_Init+0x2d8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d007      	beq.n	80013f0 <HAL_GPIO_Init+0x1d8>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a44      	ldr	r2, [pc, #272]	@ (80014f4 <HAL_GPIO_Init+0x2dc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_GPIO_Init+0x1d4>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013ec:	2305      	movs	r3, #5
 80013ee:	e004      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e002      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <HAL_GPIO_Init+0x1e2>
 80013f8:	2300      	movs	r3, #0
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140a:	4937      	ldr	r1, [pc, #220]	@ (80014e8 <HAL_GPIO_Init+0x2d0>)
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001418:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800143c:	4a2e      	ldr	r2, [pc, #184]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001442:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001466:	4a24      	ldr	r2, [pc, #144]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001490:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ba:	4a0f      	ldr	r2, [pc, #60]	@ (80014f8 <HAL_GPIO_Init+0x2e0>)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f47f aea9 	bne.w	8001228 <HAL_GPIO_Init+0x10>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	48000400 	.word	0x48000400
 80014f0:	48000800 	.word	0x48000800
 80014f4:	48000c00 	.word	0x48000c00
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001502:	af00      	add	r7, sp, #0
 8001504:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001508:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800150c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001512:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	f001 b823 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001526:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 817d 	beq.w	8001832 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001538:	4bbc      	ldr	r3, [pc, #752]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b04      	cmp	r3, #4
 8001542:	d00c      	beq.n	800155e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001544:	4bb9      	ldr	r3, [pc, #740]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d15c      	bne.n	800160a <HAL_RCC_OscConfig+0x10e>
 8001550:	4bb6      	ldr	r3, [pc, #728]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800155c:	d155      	bne.n	800160a <HAL_RCC_OscConfig+0x10e>
 800155e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001562:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001566:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800156a:	fa93 f3a3 	rbit	r3, r3
 800156e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001572:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	fab3 f383 	clz	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	095b      	lsrs	r3, r3, #5
 800157e:	b2db      	uxtb	r3, r3
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x94>
 800158a:	4ba8      	ldr	r3, [pc, #672]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	e015      	b.n	80015bc <HAL_RCC_OscConfig+0xc0>
 8001590:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001594:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001598:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800159c:	fa93 f3a3 	rbit	r3, r3
 80015a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80015a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80015ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80015b8:	4b9c      	ldr	r3, [pc, #624]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80015c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80015c8:	fa92 f2a2 	rbit	r2, r2
 80015cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80015d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80015d4:	fab2 f282 	clz	r2, r2
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	f002 021f 	and.w	r2, r2, #31
 80015e4:	2101      	movs	r1, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 811f 	beq.w	8001830 <HAL_RCC_OscConfig+0x334>
 80015f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f040 8116 	bne.w	8001830 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	f000 bfaf 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800160e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800161a:	d106      	bne.n	800162a <HAL_RCC_OscConfig+0x12e>
 800161c:	4b83      	ldr	r3, [pc, #524]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a82      	ldr	r2, [pc, #520]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e036      	b.n	8001698 <HAL_RCC_OscConfig+0x19c>
 800162a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10c      	bne.n	8001654 <HAL_RCC_OscConfig+0x158>
 800163a:	4b7c      	ldr	r3, [pc, #496]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7b      	ldr	r2, [pc, #492]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b79      	ldr	r3, [pc, #484]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a78      	ldr	r2, [pc, #480]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	e021      	b.n	8001698 <HAL_RCC_OscConfig+0x19c>
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x184>
 8001666:	4b71      	ldr	r3, [pc, #452]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a70      	ldr	r2, [pc, #448]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6e      	ldr	r3, [pc, #440]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6d      	ldr	r2, [pc, #436]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x19c>
 8001680:	4b6a      	ldr	r3, [pc, #424]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a69      	ldr	r2, [pc, #420]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b67      	ldr	r3, [pc, #412]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a66      	ldr	r2, [pc, #408]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001696:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001698:	4b64      	ldr	r3, [pc, #400]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800169a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169c:	f023 020f 	bic.w	r2, r3, #15
 80016a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	495f      	ldr	r1, [pc, #380]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d059      	beq.n	8001776 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fad1 	bl	8000c68 <HAL_GetTick>
 80016c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e00a      	b.n	80016e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff facc 	bl	8000c68 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	@ 0x64
 80016da:	d902      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	f000 bf43 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 80016e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80016f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	fab3 f383 	clz	r3, r3
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	095b      	lsrs	r3, r3, #5
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d102      	bne.n	8001714 <HAL_RCC_OscConfig+0x218>
 800170e:	4b47      	ldr	r3, [pc, #284]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	e015      	b.n	8001740 <HAL_RCC_OscConfig+0x244>
 8001714:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001718:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001728:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001730:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001734:	fa93 f3a3 	rbit	r3, r3
 8001738:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800173c:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001744:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001748:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800174c:	fa92 f2a2 	rbit	r2, r2
 8001750:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001754:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f042 0220 	orr.w	r2, r2, #32
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ab      	beq.n	80016cc <HAL_RCC_OscConfig+0x1d0>
 8001774:	e05d      	b.n	8001832 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff fa77 	bl	8000c68 <HAL_GetTick>
 800177a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	e00a      	b.n	8001796 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001780:	f7ff fa72 	bl	8000c68 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b64      	cmp	r3, #100	@ 0x64
 800178e:	d902      	bls.n	8001796 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	f000 bee9 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 8001796:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800179a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80017aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	fab3 f383 	clz	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	095b      	lsrs	r3, r3, #5
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d102      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2cc>
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e015      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f8>
 80017c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80017dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017f0:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80017fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001800:	fa92 f2a2 	rbit	r2, r2
 8001804:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001808:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800180c:	fab2 f282 	clz	r2, r2
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	f042 0220 	orr.w	r2, r2, #32
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	f002 021f 	and.w	r2, r2, #31
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ab      	bne.n	8001780 <HAL_RCC_OscConfig+0x284>
 8001828:	e003      	b.n	8001832 <HAL_RCC_OscConfig+0x336>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 817d 	beq.w	8001b42 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001848:	4ba6      	ldr	r3, [pc, #664]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001854:	4ba3      	ldr	r3, [pc, #652]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 030c 	and.w	r3, r3, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d172      	bne.n	8001946 <HAL_RCC_OscConfig+0x44a>
 8001860:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d16c      	bne.n	8001946 <HAL_RCC_OscConfig+0x44a>
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800187e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	fab3 f383 	clz	r3, r3
 8001886:	b2db      	uxtb	r3, r3
 8001888:	095b      	lsrs	r3, r3, #5
 800188a:	b2db      	uxtb	r3, r3
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d102      	bne.n	800189c <HAL_RCC_OscConfig+0x3a0>
 8001896:	4b93      	ldr	r3, [pc, #588]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e013      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c8>
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80018b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80018c0:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	2202      	movs	r2, #2
 80018c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80018ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80018ce:	fa92 f2a2 	rbit	r2, r2
 80018d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80018d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80018da:	fab2 f282 	clz	r2, r2
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f042 0220 	orr.w	r2, r2, #32
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	f002 021f 	and.w	r2, r2, #31
 80018ea:	2101      	movs	r1, #1
 80018ec:	fa01 f202 	lsl.w	r2, r1, r2
 80018f0:	4013      	ands	r3, r2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00a      	beq.n	800190c <HAL_RCC_OscConfig+0x410>
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d002      	beq.n	800190c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	f000 be2e 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190c:	4b75      	ldr	r3, [pc, #468]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	21f8      	movs	r1, #248	@ 0xf8
 8001922:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800192a:	fa91 f1a1 	rbit	r1, r1
 800192e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001932:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001936:	fab1 f181 	clz	r1, r1
 800193a:	b2c9      	uxtb	r1, r1
 800193c:	408b      	lsls	r3, r1
 800193e:	4969      	ldr	r1, [pc, #420]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001944:	e0fd      	b.n	8001b42 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8088 	beq.w	8001a68 <HAL_RCC_OscConfig+0x56c>
 8001958:	2301      	movs	r3, #1
 800195a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001962:	fa93 f3a3 	rbit	r3, r3
 8001966:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800196a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001978:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	461a      	mov	r2, r3
 8001980:	2301      	movs	r3, #1
 8001982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f970 	bl	8000c68 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff f96b 	bl	8000c68 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d902      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	f000 bde2 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 80019a4:	2302      	movs	r3, #2
 80019a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80019ae:	fa93 f3a3 	rbit	r3, r3
 80019b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80019b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	095b      	lsrs	r3, r3, #5
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4d8>
 80019ce:	4b45      	ldr	r3, [pc, #276]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	e013      	b.n	80019fc <HAL_RCC_OscConfig+0x500>
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80019de:	fa93 f3a3 	rbit	r3, r3
 80019e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80019ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	2202      	movs	r2, #2
 80019fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001a02:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001a06:	fa92 f2a2 	rbit	r2, r2
 8001a0a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001a0e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001a12:	fab2 f282 	clz	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0af      	beq.n	800198e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	21f8      	movs	r1, #248	@ 0xf8
 8001a44:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001a4c:	fa91 f1a1 	rbit	r1, r1
 8001a50:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a54:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a58:	fab1 f181 	clz	r1, r1
 8001a5c:	b2c9      	uxtb	r1, r1
 8001a5e:	408b      	lsls	r3, r1
 8001a60:	4920      	ldr	r1, [pc, #128]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
 8001a66:	e06c      	b.n	8001b42 <HAL_RCC_OscConfig+0x646>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a88:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2300      	movs	r3, #0
 8001a92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff f8e8 	bl	8000c68 <HAL_GetTick>
 8001a98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9c:	e00a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f8e3 	bl	8000c68 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d902      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f000 bd5a 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	fab3 f383 	clz	r3, r3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	095b      	lsrs	r3, r3, #5
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d104      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x5ec>
 8001ade:	4b01      	ldr	r3, [pc, #4]	@ (8001ae4 <HAL_RCC_OscConfig+0x5e8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e015      	b.n	8001b10 <HAL_RCC_OscConfig+0x614>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	2302      	movs	r3, #2
 8001aea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001b00:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001b0c:	4bc8      	ldr	r3, [pc, #800]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	2202      	movs	r2, #2
 8001b12:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001b16:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b1a:	fa92 f2a2 	rbit	r2, r2
 8001b1e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001b22:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001b26:	fab2 f282 	clz	r2, r2
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f042 0220 	orr.w	r2, r2, #32
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f002 021f 	and.w	r2, r2, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ad      	bne.n	8001a9e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8110 	beq.w	8001d78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d079      	beq.n	8001c5c <HAL_RCC_OscConfig+0x760>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b7e:	fab3 f383 	clz	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461a      	mov	r2, r3
 8001b86:	4bab      	ldr	r3, [pc, #684]	@ (8001e34 <HAL_RCC_OscConfig+0x938>)
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff f869 	bl	8000c68 <HAL_GetTick>
 8001b96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f864 	bl	8000c68 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d902      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f000 bcdb 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0c:	4b88      	ldr	r3, [pc, #544]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c18:	2102      	movs	r1, #2
 8001c1a:	6019      	str	r1, [r3, #0]
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f1a3 	rbit	r1, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c32:	6019      	str	r1, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2101      	movs	r1, #1
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0a0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x6a0>
 8001c5a:	e08d      	b.n	8001d78 <HAL_RCC_OscConfig+0x87c>
 8001c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fa93 f2a3 	rbit	r2, r3
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c7e:	601a      	str	r2, [r3, #0]
  return result;
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8a:	fab3 f383 	clz	r3, r3
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b68      	ldr	r3, [pc, #416]	@ (8001e34 <HAL_RCC_OscConfig+0x938>)
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7fe ffe3 	bl	8000c68 <HAL_GetTick>
 8001ca2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7fe ffde 	bl	8000c68 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d902      	bls.n	8001cbe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	f000 bc55 	b.w	8002568 <HAL_RCC_OscConfig+0x106c>
 8001cbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cea:	2202      	movs	r2, #2
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001d2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d36:	2102      	movs	r1, #2
 8001d38:	6019      	str	r1, [r3, #0]
 8001d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	fa93 f1a3 	rbit	r1, r3
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d50:	6019      	str	r1, [r3, #0]
  return result;
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d197      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 81a1 	beq.w	80020d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d94:	4b26      	ldr	r3, [pc, #152]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d116      	bne.n	8001dce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da0:	4b23      	ldr	r3, [pc, #140]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	4a22      	ldr	r2, [pc, #136]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	61d3      	str	r3, [r2, #28]
 8001dac:	4b20      	ldr	r3, [pc, #128]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001db8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001dc6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_OscConfig+0x93c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dda:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_RCC_OscConfig+0x93c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_RCC_OscConfig+0x93c>)
 8001de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7fe ff3f 	bl	8000c68 <HAL_GetTick>
 8001dea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	e009      	b.n	8001e04 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe ff3a 	bl	8000c68 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b64      	cmp	r3, #100	@ 0x64
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e3b1      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b0c      	ldr	r3, [pc, #48]	@ (8001e38 <HAL_RCC_OscConfig+0x93c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d10d      	bne.n	8001e3c <HAL_RCC_OscConfig+0x940>
 8001e20:	4b03      	ldr	r3, [pc, #12]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a02      	ldr	r2, [pc, #8]	@ (8001e30 <HAL_RCC_OscConfig+0x934>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e03c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x9ac>
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	10908120 	.word	0x10908120
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10c      	bne.n	8001e66 <HAL_RCC_OscConfig+0x96a>
 8001e4c:	4bc1      	ldr	r3, [pc, #772]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4ac0      	ldr	r2, [pc, #768]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e52:	f023 0301 	bic.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	4bbe      	ldr	r3, [pc, #760]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	4abd      	ldr	r2, [pc, #756]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e5e:	f023 0304 	bic.w	r3, r3, #4
 8001e62:	6213      	str	r3, [r2, #32]
 8001e64:	e020      	b.n	8001ea8 <HAL_RCC_OscConfig+0x9ac>
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b05      	cmp	r3, #5
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x994>
 8001e76:	4bb7      	ldr	r3, [pc, #732]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4ab6      	ldr	r2, [pc, #728]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4bb4      	ldr	r3, [pc, #720]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4ab3      	ldr	r2, [pc, #716]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x9ac>
 8001e90:	4bb0      	ldr	r3, [pc, #704]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	4aaf      	ldr	r2, [pc, #700]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	6213      	str	r3, [r2, #32]
 8001e9c:	4bad      	ldr	r3, [pc, #692]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4aac      	ldr	r2, [pc, #688]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001ea2:	f023 0304 	bic.w	r3, r3, #4
 8001ea6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 8081 	beq.w	8001fbc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eba:	f7fe fed5 	bl	8000c68 <HAL_GetTick>
 8001ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	e00b      	b.n	8001edc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7fe fed0 	bl	8000c68 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e345      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
 8001edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	fa93 f2a3 	rbit	r2, r3
 8001ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f08:	2202      	movs	r2, #2
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	fa93 f2a3 	rbit	r2, r3
 8001f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f22:	601a      	str	r2, [r3, #0]
  return result;
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	fab3 f383 	clz	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	095b      	lsrs	r3, r3, #5
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d102      	bne.n	8001f48 <HAL_RCC_OscConfig+0xa4c>
 8001f42:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	e013      	b.n	8001f70 <HAL_RCC_OscConfig+0xa74>
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f78:	2102      	movs	r1, #2
 8001f7a:	6011      	str	r1, [r2, #0]
 8001f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f84:	6812      	ldr	r2, [r2, #0]
 8001f86:	fa92 f1a2 	rbit	r1, r2
 8001f8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f92:	6011      	str	r1, [r2, #0]
  return result;
 8001f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	fab2 f282 	clz	r2, r2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f002 021f 	and.w	r2, r2, #31
 8001fae:	2101      	movs	r1, #1
 8001fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d084      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x9c8>
 8001fba:	e07f      	b.n	80020bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbc:	f7fe fe54 	bl	8000c68 <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc4:	e00b      	b.n	8001fde <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fe4f 	bl	8000c68 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e2c4      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
 8001fde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002006:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800200a:	2202      	movs	r2, #2
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002024:	601a      	str	r2, [r3, #0]
  return result;
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800202e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d102      	bne.n	800204a <HAL_RCC_OscConfig+0xb4e>
 8002044:	4b43      	ldr	r3, [pc, #268]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	e013      	b.n	8002072 <HAL_RCC_OscConfig+0xb76>
 800204a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	4b39      	ldr	r3, [pc, #228]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002076:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800207a:	2102      	movs	r1, #2
 800207c:	6011      	str	r1, [r2, #0]
 800207e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002082:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	fa92 f1a2 	rbit	r1, r2
 800208c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002090:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002094:	6011      	str	r1, [r2, #0]
  return result;
 8002096:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800209a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	f002 021f 	and.w	r2, r2, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f202 	lsl.w	r2, r1, r2
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d184      	bne.n	8001fc6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c4:	4b23      	ldr	r3, [pc, #140]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	4a22      	ldr	r2, [pc, #136]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 80020ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 8242 	beq.w	8002566 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002154 <HAL_RCC_OscConfig+0xc58>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	f000 8213 	beq.w	8002516 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	f040 8162 	bne.w	80023c6 <HAL_RCC_OscConfig+0xeca>
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800210a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002126:	601a      	str	r2, [r3, #0]
  return result;
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002130:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800213c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	461a      	mov	r2, r3
 8002144:	2300      	movs	r3, #0
 8002146:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fd8e 	bl	8000c68 <HAL_GetTick>
 800214c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002150:	e00c      	b.n	800216c <HAL_RCC_OscConfig+0xc70>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fd86 	bl	8000c68 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1fd      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002174:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002190:	601a      	str	r2, [r3, #0]
  return result;
 8002192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002196:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800219a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d102      	bne.n	80021b6 <HAL_RCC_OscConfig+0xcba>
 80021b0:	4bb0      	ldr	r3, [pc, #704]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	e027      	b.n	8002206 <HAL_RCC_OscConfig+0xd0a>
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	fa93 f2a3 	rbit	r2, r3
 80021d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	fa93 f2a3 	rbit	r2, r3
 80021f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	4b9c      	ldr	r3, [pc, #624]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800220a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800220e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002212:	6011      	str	r1, [r2, #0]
 8002214:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002218:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	fa92 f1a2 	rbit	r1, r2
 8002222:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002226:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800222a:	6011      	str	r1, [r2, #0]
  return result;
 800222c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002230:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	f042 0220 	orr.w	r2, r2, #32
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f002 021f 	and.w	r2, r2, #31
 8002246:	2101      	movs	r1, #1
 8002248:	fa01 f202 	lsl.w	r2, r1, r2
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d182      	bne.n	8002158 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002252:	4b88      	ldr	r3, [pc, #544]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002266:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	430b      	orrs	r3, r1
 8002274:	497f      	ldr	r1, [pc, #508]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002282:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800229e:	601a      	str	r2, [r3, #0]
  return result;
 80022a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80022a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80022b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	461a      	mov	r2, r3
 80022bc:	2301      	movs	r3, #1
 80022be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fcd2 	bl	8000c68 <HAL_GetTick>
 80022c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	e009      	b.n	80022de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fccd 	bl	8000c68 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e144      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	fa93 f2a3 	rbit	r2, r3
 80022fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002302:	601a      	str	r2, [r3, #0]
  return result;
 8002304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002308:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800230c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_RCC_OscConfig+0xe2c>
 8002322:	4b54      	ldr	r3, [pc, #336]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e027      	b.n	8002378 <HAL_RCC_OscConfig+0xe7c>
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002330:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800233a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	fa93 f2a3 	rbit	r2, r3
 8002344:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002348:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002356:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002360:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	fa93 f2a3 	rbit	r2, r3
 800236a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800236e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	4b3f      	ldr	r3, [pc, #252]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002380:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002384:	6011      	str	r1, [r2, #0]
 8002386:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800238a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	fa92 f1a2 	rbit	r1, r2
 8002394:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002398:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800239c:	6011      	str	r1, [r2, #0]
  return result;
 800239e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	fab2 f282 	clz	r2, r2
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	f042 0220 	orr.w	r2, r2, #32
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	f002 021f 	and.w	r2, r2, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f202 	lsl.w	r2, r1, r2
 80023be:	4013      	ands	r3, r2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d082      	beq.n	80022ca <HAL_RCC_OscConfig+0xdce>
 80023c4:	e0cf      	b.n	8002566 <HAL_RCC_OscConfig+0x106a>
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023ea:	601a      	str	r2, [r3, #0]
  return result;
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002400:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	461a      	mov	r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fc2c 	bl	8000c68 <HAL_GetTick>
 8002410:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002414:	e009      	b.n	800242a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fc27 	bl	8000c68 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e09e      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002432:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002436:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800244e:	601a      	str	r2, [r3, #0]
  return result;
 8002450:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002454:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002458:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d104      	bne.n	8002478 <HAL_RCC_OscConfig+0xf7c>
 800246e:	4b01      	ldr	r3, [pc, #4]	@ (8002474 <HAL_RCC_OscConfig+0xf78>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	e029      	b.n	80024c8 <HAL_RCC_OscConfig+0xfcc>
 8002474:	40021000 	.word	0x40021000
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002480:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800248a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fa93 f2a3 	rbit	r2, r3
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80024a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002574 <HAL_RCC_OscConfig+0x1078>)
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024d4:	6011      	str	r1, [r2, #0]
 80024d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	fa92 f1a2 	rbit	r1, r2
 80024e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024ec:	6011      	str	r1, [r2, #0]
  return result;
 80024ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	fab2 f282 	clz	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d180      	bne.n	8002416 <HAL_RCC_OscConfig+0xf1a>
 8002514:	e027      	b.n	8002566 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e01e      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800252a:	4b12      	ldr	r3, [pc, #72]	@ (8002574 <HAL_RCC_OscConfig+0x1078>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002532:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002536:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800253a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	429a      	cmp	r2, r3
 8002548:	d10b      	bne.n	8002562 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800254a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800254e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002556:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b09e      	sub	sp, #120	@ 0x78
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e162      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b90      	ldr	r3, [pc, #576]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b8d      	ldr	r3, [pc, #564]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	498b      	ldr	r1, [pc, #556]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b89      	ldr	r3, [pc, #548]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e14a      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b82      	ldr	r3, [pc, #520]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	497f      	ldr	r1, [pc, #508]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80dc 	beq.w	80027a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d13c      	bne.n	800266e <HAL_RCC_ClockConfig+0xf6>
 80025f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025fc:	fa93 f3a3 	rbit	r3, r3
 8002600:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002604:	fab3 f383 	clz	r3, r3
 8002608:	b2db      	uxtb	r3, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_RCC_ClockConfig+0xa6>
 8002618:	4b6f      	ldr	r3, [pc, #444]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e00f      	b.n	800263e <HAL_RCC_ClockConfig+0xc6>
 800261e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002622:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	667b      	str	r3, [r7, #100]	@ 0x64
 800262c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002630:	663b      	str	r3, [r7, #96]	@ 0x60
 8002632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800263a:	4b67      	ldr	r3, [pc, #412]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002642:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002646:	fa92 f2a2 	rbit	r2, r2
 800264a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800264c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800264e:	fab2 f282 	clz	r2, r2
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	f042 0220 	orr.w	r2, r2, #32
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	f002 021f 	and.w	r2, r2, #31
 800265e:	2101      	movs	r1, #1
 8002660:	fa01 f202 	lsl.w	r2, r1, r2
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d17b      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0f3      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b02      	cmp	r3, #2
 8002674:	d13c      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x178>
 8002676:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	095b      	lsrs	r3, r3, #5
 800268e:	b2db      	uxtb	r3, r3
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d102      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x128>
 800269a:	4b4f      	ldr	r3, [pc, #316]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	e00f      	b.n	80026c0 <HAL_RCC_ClockConfig+0x148>
 80026a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80026b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026bc:	4b46      	ldr	r3, [pc, #280]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80026c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026c8:	fa92 f2a2 	rbit	r2, r2
 80026cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80026ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026d0:	fab2 f282 	clz	r2, r2
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	f042 0220 	orr.w	r2, r2, #32
 80026da:	b2d2      	uxtb	r2, r2
 80026dc:	f002 021f 	and.w	r2, r2, #31
 80026e0:	2101      	movs	r1, #1
 80026e2:	fa01 f202 	lsl.w	r2, r1, r2
 80026e6:	4013      	ands	r3, r2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d13a      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0b2      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
 80026f0:	2302      	movs	r3, #2
 80026f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80026fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_RCC_ClockConfig+0x1a0>
 8002712:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	e00d      	b.n	8002734 <HAL_RCC_ClockConfig+0x1bc>
 8002718:	2302      	movs	r3, #2
 800271a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	4b29      	ldr	r3, [pc, #164]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002734:	2202      	movs	r2, #2
 8002736:	61ba      	str	r2, [r7, #24]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	fa92 f2a2 	rbit	r2, r2
 800273e:	617a      	str	r2, [r7, #20]
  return result;
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e079      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	491a      	ldr	r1, [pc, #104]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe fa78 	bl	8000c68 <HAL_GetTick>
 8002778:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe fa74 	bl	8000c68 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e061      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_RCC_ClockConfig+0x260>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d214      	bcs.n	80027dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4906      	ldr	r1, [pc, #24]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_RCC_ClockConfig+0x25c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e040      	b.n	8002856 <HAL_RCC_ClockConfig+0x2de>
 80027d4:	40022000 	.word	0x40022000
 80027d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <HAL_RCC_ClockConfig+0x2e8>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	491a      	ldr	r1, [pc, #104]	@ (8002860 <HAL_RCC_ClockConfig+0x2e8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d009      	beq.n	800281a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002806:	4b16      	ldr	r3, [pc, #88]	@ (8002860 <HAL_RCC_ClockConfig+0x2e8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4912      	ldr	r1, [pc, #72]	@ (8002860 <HAL_RCC_ClockConfig+0x2e8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800281a:	f000 f829 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800281e:	4601      	mov	r1, r0
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <HAL_RCC_ClockConfig+0x2e8>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002828:	22f0      	movs	r2, #240	@ 0xf0
 800282a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	fa92 f2a2 	rbit	r2, r2
 8002832:	60fa      	str	r2, [r7, #12]
  return result;
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	fab2 f282 	clz	r2, r2
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	40d3      	lsrs	r3, r2
 800283e:	4a09      	ldr	r2, [pc, #36]	@ (8002864 <HAL_RCC_ClockConfig+0x2ec>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	fa21 f303 	lsr.w	r3, r1, r3
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <HAL_RCC_ClockConfig+0x2f0>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800284a:	4b08      	ldr	r3, [pc, #32]	@ (800286c <HAL_RCC_ClockConfig+0x2f4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe f9c6 	bl	8000be0 <HAL_InitTick>
  
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3778      	adds	r7, #120	@ 0x78
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08004868 	.word	0x08004868
 8002868:	20000000 	.word	0x20000000
 800286c:	20000004 	.word	0x20000004

08002870 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800288a:	4b1e      	ldr	r3, [pc, #120]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x94>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b04      	cmp	r3, #4
 8002898:	d002      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x30>
 800289a:	2b08      	cmp	r3, #8
 800289c:	d003      	beq.n	80028a6 <HAL_RCC_GetSysClockFreq+0x36>
 800289e:	e026      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a0:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028a2:	613b      	str	r3, [r7, #16]
      break;
 80028a4:	e026      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	0c9b      	lsrs	r3, r3, #18
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	4a17      	ldr	r2, [pc, #92]	@ (800290c <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80028b4:	4b13      	ldr	r3, [pc, #76]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x94>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	4a14      	ldr	r2, [pc, #80]	@ (8002910 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028be:	5cd3      	ldrb	r3, [r2, r3]
 80028c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e004      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028e2:	fb02 f303 	mul.w	r3, r2, r3
 80028e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	613b      	str	r3, [r7, #16]
      break;
 80028ec:	e002      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x98>)
 80028f0:	613b      	str	r3, [r7, #16]
      break;
 80028f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028f4:	693b      	ldr	r3, [r7, #16]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	007a1200 	.word	0x007a1200
 800290c:	08004880 	.word	0x08004880
 8002910:	08004890 	.word	0x08004890
 8002914:	003d0900 	.word	0x003d0900

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <HAL_RCC_GetHCLKFreq+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	20000000 	.word	0x20000000

08002930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002936:	f7ff ffef 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800293a:	4601      	mov	r1, r0
 800293c:	4b0b      	ldr	r3, [pc, #44]	@ (800296c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002944:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002948:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	fa92 f2a2 	rbit	r2, r2
 8002950:	603a      	str	r2, [r7, #0]
  return result;
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	fab2 f282 	clz	r2, r2
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	40d3      	lsrs	r3, r2
 800295c:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x40>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40021000 	.word	0x40021000
 8002970:	08004878 	.word	0x08004878

08002974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800297a:	f7ff ffcd 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800297e:	4601      	mov	r1, r0
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002988:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800298c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	fa92 f2a2 	rbit	r2, r2
 8002994:	603a      	str	r2, [r7, #0]
  return result;
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	fab2 f282 	clz	r2, r2
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	40d3      	lsrs	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	@ (80029b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029a2:	5cd3      	ldrb	r3, [r2, r3]
 80029a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08004878 	.word	0x08004878

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b092      	sub	sp, #72	@ 0x48
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 80cd 	beq.w	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029dc:	4b86      	ldr	r3, [pc, #536]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10e      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e8:	4b83      	ldr	r3, [pc, #524]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4a82      	ldr	r2, [pc, #520]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f2:	61d3      	str	r3, [r2, #28]
 80029f4:	4b80      	ldr	r3, [pc, #512]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b7d      	ldr	r3, [pc, #500]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b7a      	ldr	r3, [pc, #488]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a79      	ldr	r2, [pc, #484]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7fe f923 	bl	8000c68 <HAL_GetTick>
 8002a22:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7fe f91f 	bl	8000c68 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	@ 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0db      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b70      	ldr	r3, [pc, #448]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a44:	4b6c      	ldr	r3, [pc, #432]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d07d      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d076      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a62:	4b65      	ldr	r3, [pc, #404]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a70:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a7c:	fab3 f383 	clz	r3, r3
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	4b5e      	ldr	r3, [pc, #376]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	4b55      	ldr	r3, [pc, #340]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ab4:	4a50      	ldr	r2, [pc, #320]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ab8:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d045      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f8d0 	bl	8000c68 <HAL_GetTick>
 8002ac8:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002acc:	f7fe f8cc 	bl	8000c68 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e086      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aee:	2302      	movs	r3, #2
 8002af0:	623b      	str	r3, [r7, #32]
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	fa93 f3a3 	rbit	r3, r3
 8002af8:	61fb      	str	r3, [r7, #28]
  return result;
 8002afa:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	fab3 f383 	clz	r3, r3
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	095b      	lsrs	r3, r3, #5
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0302 	orr.w	r3, r3, #2
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d102      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b10:	4b39      	ldr	r3, [pc, #228]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	e007      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b16:	2302      	movs	r3, #2
 8002b18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	4b35      	ldr	r3, [pc, #212]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	2202      	movs	r2, #2
 8002b28:	613a      	str	r2, [r7, #16]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	fa92 f2a2 	rbit	r2, r2
 8002b30:	60fa      	str	r2, [r7, #12]
  return result;
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	f002 021f 	and.w	r2, r2, #31
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0bd      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b50:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4926      	ldr	r1, [pc, #152]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4a22      	ldr	r2, [pc, #136]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b74:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	491a      	ldr	r1, [pc, #104]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba0:	4b15      	ldr	r3, [pc, #84]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f023 0210 	bic.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4912      	ldr	r1, [pc, #72]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	490b      	ldr	r1, [pc, #44]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bdc:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	4903      	ldr	r1, [pc, #12]	@ (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3748      	adds	r7, #72	@ 0x48
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	40007000 	.word	0x40007000
 8002c00:	10908100 	.word	0x10908100

08002c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e049      	b.n	8002caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fd fe86 	bl	800093c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2202      	movs	r2, #2
 8002c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f000 fd68 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e049      	b.n	8002d58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f841 	bl	8002d60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 fd11 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e03c      	b.n	8002e1a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d109      	bne.n	8002dba <HAL_TIM_PWM_Start_DMA+0x46>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	bf0c      	ite	eq
 8002db2:	2301      	moveq	r3, #1
 8002db4:	2300      	movne	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	e02f      	b.n	8002e1a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b08      	cmp	r3, #8
 8002dbe:	d109      	bne.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x60>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e022      	b.n	8002e1a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d109      	bne.n	8002dee <HAL_TIM_PWM_Start_DMA+0x7a>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e015      	b.n	8002e1a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d109      	bne.n	8002e08 <HAL_TIM_PWM_Start_DMA+0x94>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	bf0c      	ite	eq
 8002e00:	2301      	moveq	r3, #1
 8002e02:	2300      	movne	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	e008      	b.n	8002e1a <HAL_TIM_PWM_Start_DMA+0xa6>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e197      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_TIM_PWM_Start_DMA+0xc8>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e03c      	b.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d109      	bne.n	8002e56 <HAL_TIM_PWM_Start_DMA+0xe2>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	bf0c      	ite	eq
 8002e4e:	2301      	moveq	r3, #1
 8002e50:	2300      	movne	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e02f      	b.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d109      	bne.n	8002e70 <HAL_TIM_PWM_Start_DMA+0xfc>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e022      	b.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d109      	bne.n	8002e8a <HAL_TIM_PWM_Start_DMA+0x116>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e015      	b.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start_DMA+0x130>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e008      	b.n	8002eb6 <HAL_TIM_PWM_Start_DMA+0x142>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d034      	beq.n	8002f24 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <HAL_TIM_PWM_Start_DMA+0x152>
 8002ec0:	887b      	ldrh	r3, [r7, #2]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e143      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Start_DMA+0x166>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed8:	e026      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start_DMA+0x176>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee8:	e01e      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start_DMA+0x186>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef8:	e016      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start_DMA+0x196>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f08:	e00e      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f18:	e006      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f22:	e001      	b.n	8002f28 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e114      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
  }

  switch (Channel)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	f200 80ae 	bhi.w	800308c <HAL_TIM_PWM_Start_DMA+0x318>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f6d 	.word	0x08002f6d
 8002f3c:	0800308d 	.word	0x0800308d
 8002f40:	0800308d 	.word	0x0800308d
 8002f44:	0800308d 	.word	0x0800308d
 8002f48:	08002fb5 	.word	0x08002fb5
 8002f4c:	0800308d 	.word	0x0800308d
 8002f50:	0800308d 	.word	0x0800308d
 8002f54:	0800308d 	.word	0x0800308d
 8002f58:	08002ffd 	.word	0x08002ffd
 8002f5c:	0800308d 	.word	0x0800308d
 8002f60:	0800308d 	.word	0x0800308d
 8002f64:	0800308d 	.word	0x0800308d
 8002f68:	08003045 	.word	0x08003045
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f70:	4a7a      	ldr	r2, [pc, #488]	@ (800315c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f78:	4a79      	ldr	r2, [pc, #484]	@ (8003160 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	4a78      	ldr	r2, [pc, #480]	@ (8003164 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	3334      	adds	r3, #52	@ 0x34
 8002f90:	461a      	mov	r2, r3
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	f7fd fff0 	bl	8000f78 <HAL_DMA_Start_IT>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e0d7      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb0:	60da      	str	r2, [r3, #12]
      break;
 8002fb2:	e06e      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb8:	4a68      	ldr	r2, [pc, #416]	@ (800315c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8002fba:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	4a67      	ldr	r2, [pc, #412]	@ (8003160 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8002fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc8:	4a66      	ldr	r2, [pc, #408]	@ (8003164 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3338      	adds	r3, #56	@ 0x38
 8002fd8:	461a      	mov	r2, r3
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	f7fd ffcc 	bl	8000f78 <HAL_DMA_Start_IT>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0b3      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ff8:	60da      	str	r2, [r3, #12]
      break;
 8002ffa:	e04a      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003002:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	4a55      	ldr	r2, [pc, #340]	@ (8003160 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800300a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	4a54      	ldr	r2, [pc, #336]	@ (8003164 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	333c      	adds	r3, #60	@ 0x3c
 8003020:	461a      	mov	r2, r3
 8003022:	887b      	ldrh	r3, [r7, #2]
 8003024:	f7fd ffa8 	bl	8000f78 <HAL_DMA_Start_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e08f      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003040:	60da      	str	r2, [r3, #12]
      break;
 8003042:	e026      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	4a44      	ldr	r2, [pc, #272]	@ (800315c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 800304a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003050:	4a43      	ldr	r2, [pc, #268]	@ (8003160 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003052:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003058:	4a42      	ldr	r2, [pc, #264]	@ (8003164 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800305a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	3340      	adds	r3, #64	@ 0x40
 8003068:	461a      	mov	r2, r3
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	f7fd ff84 	bl	8000f78 <HAL_DMA_Start_IT>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e06b      	b.n	8003152 <HAL_TIM_PWM_Start_DMA+0x3de>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003088:	60da      	str	r2, [r3, #12]
      break;
 800308a:	e002      	b.n	8003092 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	75fb      	strb	r3, [r7, #23]
      break;
 8003090:	bf00      	nop
  }

  if (status == HAL_OK)
 8003092:	7dfb      	ldrb	r3, [r7, #23]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d15b      	bne.n	8003150 <HAL_TIM_PWM_Start_DMA+0x3dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fefd 	bl	8003ea0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003168 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIM_PWM_Start_DMA+0x35a>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_TIM_PWM_Start_DMA+0x35a>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2c      	ldr	r2, [pc, #176]	@ (8003170 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIM_PWM_Start_DMA+0x35a>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003174 <HAL_TIM_PWM_Start_DMA+0x400>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_PWM_Start_DMA+0x35e>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_TIM_PWM_Start_DMA+0x360>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_PWM_Start_DMA+0x374>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003168 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00e      	beq.n	8003110 <HAL_TIM_PWM_Start_DMA+0x39c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fa:	d009      	beq.n	8003110 <HAL_TIM_PWM_Start_DMA+0x39c>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1d      	ldr	r2, [pc, #116]	@ (8003178 <HAL_TIM_PWM_Start_DMA+0x404>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d004      	beq.n	8003110 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a18      	ldr	r2, [pc, #96]	@ (800316c <HAL_TIM_PWM_Start_DMA+0x3f8>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d115      	bne.n	800313c <HAL_TIM_PWM_Start_DMA+0x3c8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	4b19      	ldr	r3, [pc, #100]	@ (800317c <HAL_TIM_PWM_Start_DMA+0x408>)
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d015      	beq.n	800314e <HAL_TIM_PWM_Start_DMA+0x3da>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003128:	d011      	beq.n	800314e <HAL_TIM_PWM_Start_DMA+0x3da>
      {
        __HAL_TIM_ENABLE(htim);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f042 0201 	orr.w	r2, r2, #1
 8003138:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313a:	e008      	b.n	800314e <HAL_TIM_PWM_Start_DMA+0x3da>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	e000      	b.n	8003150 <HAL_TIM_PWM_Start_DMA+0x3dc>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800314e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003150:	7dfb      	ldrb	r3, [r7, #23]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	08003609 	.word	0x08003609
 8003160:	080036b1 	.word	0x080036b1
 8003164:	08003577 	.word	0x08003577
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40014000 	.word	0x40014000
 8003170:	40014400 	.word	0x40014400
 8003174:	40014800 	.word	0x40014800
 8003178:	40000400 	.word	0x40000400
 800317c:	00010007 	.word	0x00010007

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ff      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b14      	cmp	r3, #20
 80031aa:	f200 80f0 	bhi.w	800338e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ae:	a201      	add	r2, pc, #4	@ (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	08003209 	.word	0x08003209
 80031b8:	0800338f 	.word	0x0800338f
 80031bc:	0800338f 	.word	0x0800338f
 80031c0:	0800338f 	.word	0x0800338f
 80031c4:	08003249 	.word	0x08003249
 80031c8:	0800338f 	.word	0x0800338f
 80031cc:	0800338f 	.word	0x0800338f
 80031d0:	0800338f 	.word	0x0800338f
 80031d4:	0800328b 	.word	0x0800328b
 80031d8:	0800338f 	.word	0x0800338f
 80031dc:	0800338f 	.word	0x0800338f
 80031e0:	0800338f 	.word	0x0800338f
 80031e4:	080032cb 	.word	0x080032cb
 80031e8:	0800338f 	.word	0x0800338f
 80031ec:	0800338f 	.word	0x0800338f
 80031f0:	0800338f 	.word	0x0800338f
 80031f4:	0800330d 	.word	0x0800330d
 80031f8:	0800338f 	.word	0x0800338f
 80031fc:	0800338f 	.word	0x0800338f
 8003200:	0800338f 	.word	0x0800338f
 8003204:	0800334d 	.word	0x0800334d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fb06 	bl	8003820 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e0a5      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fb6c 	bl	800392c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e084      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fbcb 	bl	8003a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e064      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fc29 	bl	8003b28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e043      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fc6c 	bl	8003bf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800334a:	e023      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fcaa 	bl	8003cac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003376:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800338c:	e002      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop

080033a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0b6      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x18a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd8>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x170>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340e:	f000 8086 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x176>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003418:	2b70      	cmp	r3, #112	@ 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xaa>
 800341c:	2b70      	cmp	r3, #112	@ 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003420:	2b60      	cmp	r3, #96	@ 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003424:	2b60      	cmp	r3, #96	@ 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b50      	cmp	r3, #80	@ 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xfe>
 800342c:	2b50      	cmp	r3, #80	@ 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003434:	2b40      	cmp	r3, #64	@ 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b30      	cmp	r3, #48	@ 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800343c:	2b30      	cmp	r3, #48	@ 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	f000 fcfd 	bl	8003e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
      break;
 800347e:	e04f      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	f000 fce6 	bl	8003e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e03c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 fc5a 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	@ 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fcb3 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80034c4:	e02c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 fc79 	bl	8003dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	@ 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fca3 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80034e4:	e01c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fc3a 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	@ 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fc93 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003504:	e00c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 fc8a 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 8003516:	e003      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d107      	bne.n	800359e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800359c:	e02a      	b.n	80035f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2202      	movs	r2, #2
 80035ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035b6:	e01d      	b.n	80035f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d107      	bne.n	80035d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2204      	movs	r2, #4
 80035c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035d0:	e010      	b.n	80035f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d107      	bne.n	80035ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2208      	movs	r2, #8
 80035e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035ea:	e003      	b.n	80035f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f7ff ffb4 	bl	8003562 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
}
 8003600:	bf00      	nop
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d10b      	bne.n	8003638 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d136      	bne.n	800369c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003636:	e031      	b.n	800369c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d10b      	bne.n	800365a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2202      	movs	r2, #2
 8003646:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d125      	bne.n	800369c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	e020      	b.n	800369c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	429a      	cmp	r2, r3
 8003662:	d10b      	bne.n	800367c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2204      	movs	r2, #4
 8003668:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d114      	bne.n	800369c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2201      	movs	r2, #1
 8003676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800367a:	e00f      	b.n	800369c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	429a      	cmp	r2, r3
 8003684:	d10a      	bne.n	800369c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2208      	movs	r2, #8
 800368a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff ff4c 	bl	800353a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	771a      	strb	r2, [r3, #28]
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d103      	bne.n	80036d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	771a      	strb	r2, [r3, #28]
 80036ce:	e019      	b.n	8003704 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d103      	bne.n	80036e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
 80036e0:	e010      	b.n	8003704 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d103      	bne.n	80036f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2204      	movs	r2, #4
 80036f0:	771a      	strb	r2, [r3, #28]
 80036f2:	e007      	b.n	8003704 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d102      	bne.n	8003704 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2208      	movs	r2, #8
 8003702:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ff22 	bl	800354e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a38      	ldr	r2, [pc, #224]	@ (800380c <TIM_Base_SetConfig+0xf4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d007      	beq.n	8003740 <TIM_Base_SetConfig+0x28>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d003      	beq.n	8003740 <TIM_Base_SetConfig+0x28>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <TIM_Base_SetConfig+0xf8>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d108      	bne.n	8003752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a2d      	ldr	r2, [pc, #180]	@ (800380c <TIM_Base_SetConfig+0xf4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <TIM_Base_SetConfig+0x6a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003760:	d00f      	beq.n	8003782 <TIM_Base_SetConfig+0x6a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a2a      	ldr	r2, [pc, #168]	@ (8003810 <TIM_Base_SetConfig+0xf8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00b      	beq.n	8003782 <TIM_Base_SetConfig+0x6a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a29      	ldr	r2, [pc, #164]	@ (8003814 <TIM_Base_SetConfig+0xfc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d007      	beq.n	8003782 <TIM_Base_SetConfig+0x6a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <TIM_Base_SetConfig+0x100>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_Base_SetConfig+0x6a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a27      	ldr	r2, [pc, #156]	@ (800381c <TIM_Base_SetConfig+0x104>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d108      	bne.n	8003794 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4313      	orrs	r3, r2
 8003792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a14      	ldr	r2, [pc, #80]	@ (800380c <TIM_Base_SetConfig+0xf4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d00b      	beq.n	80037d8 <TIM_Base_SetConfig+0xc0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a14      	ldr	r2, [pc, #80]	@ (8003814 <TIM_Base_SetConfig+0xfc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d007      	beq.n	80037d8 <TIM_Base_SetConfig+0xc0>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <TIM_Base_SetConfig+0x100>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d003      	beq.n	80037d8 <TIM_Base_SetConfig+0xc0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a12      	ldr	r2, [pc, #72]	@ (800381c <TIM_Base_SetConfig+0x104>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
  }
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40012c00 	.word	0x40012c00
 8003810:	40000400 	.word	0x40000400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800

08003820 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0201 	bic.w	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f023 0302 	bic.w	r3, r3, #2
 800386c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a28      	ldr	r2, [pc, #160]	@ (800391c <TIM_OC1_SetConfig+0xfc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00b      	beq.n	8003898 <TIM_OC1_SetConfig+0x78>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a27      	ldr	r2, [pc, #156]	@ (8003920 <TIM_OC1_SetConfig+0x100>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <TIM_OC1_SetConfig+0x78>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a26      	ldr	r2, [pc, #152]	@ (8003924 <TIM_OC1_SetConfig+0x104>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d003      	beq.n	8003898 <TIM_OC1_SetConfig+0x78>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <TIM_OC1_SetConfig+0x108>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d10c      	bne.n	80038b2 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f023 0308 	bic.w	r3, r3, #8
 800389e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a19      	ldr	r2, [pc, #100]	@ (800391c <TIM_OC1_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00b      	beq.n	80038d2 <TIM_OC1_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a18      	ldr	r2, [pc, #96]	@ (8003920 <TIM_OC1_SetConfig+0x100>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <TIM_OC1_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a17      	ldr	r2, [pc, #92]	@ (8003924 <TIM_OC1_SetConfig+0x104>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d003      	beq.n	80038d2 <TIM_OC1_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a16      	ldr	r2, [pc, #88]	@ (8003928 <TIM_OC1_SetConfig+0x108>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d111      	bne.n	80038f6 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800

0800392c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800392c:	b480      	push	{r7}
 800392e:	b087      	sub	sp, #28
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	f023 0210 	bic.w	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a24      	ldr	r2, [pc, #144]	@ (8003a1c <TIM_OC2_SetConfig+0xf0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d10d      	bne.n	80039ac <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a1b      	ldr	r2, [pc, #108]	@ (8003a1c <TIM_OC2_SetConfig+0xf0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_OC2_SetConfig+0xa0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a20 <TIM_OC2_SetConfig+0xf4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_OC2_SetConfig+0xa0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a19      	ldr	r2, [pc, #100]	@ (8003a24 <TIM_OC2_SetConfig+0xf8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_OC2_SetConfig+0xa0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a18      	ldr	r2, [pc, #96]	@ (8003a28 <TIM_OC2_SetConfig+0xfc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d113      	bne.n	80039f4 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039d2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039da:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	621a      	str	r2, [r3, #32]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40014000 	.word	0x40014000
 8003a24:	40014400 	.word	0x40014400
 8003a28:	40014800 	.word	0x40014800

08003a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a23      	ldr	r2, [pc, #140]	@ (8003b18 <TIM_OC3_SetConfig+0xec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10d      	bne.n	8003aaa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a1a      	ldr	r2, [pc, #104]	@ (8003b18 <TIM_OC3_SetConfig+0xec>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_OC3_SetConfig+0x9e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a19      	ldr	r2, [pc, #100]	@ (8003b1c <TIM_OC3_SetConfig+0xf0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_OC3_SetConfig+0x9e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a18      	ldr	r2, [pc, #96]	@ (8003b20 <TIM_OC3_SetConfig+0xf4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC3_SetConfig+0x9e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <TIM_OC3_SetConfig+0xf8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d113      	bne.n	8003af2 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800

08003b28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	021b      	lsls	r3, r3, #8
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	031b      	lsls	r3, r3, #12
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a16      	ldr	r2, [pc, #88]	@ (8003be0 <TIM_OC4_SetConfig+0xb8>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00b      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x7c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <TIM_OC4_SetConfig+0xbc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d007      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x7c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a14      	ldr	r2, [pc, #80]	@ (8003be8 <TIM_OC4_SetConfig+0xc0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <TIM_OC4_SetConfig+0x7c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a13      	ldr	r2, [pc, #76]	@ (8003bec <TIM_OC4_SetConfig+0xc4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d109      	bne.n	8003bb8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800

08003bf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	041b      	lsls	r3, r3, #16
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a15      	ldr	r2, [pc, #84]	@ (8003c9c <TIM_OC5_SetConfig+0xac>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <TIM_OC5_SetConfig+0x72>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ca0 <TIM_OC5_SetConfig+0xb0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <TIM_OC5_SetConfig+0x72>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a13      	ldr	r2, [pc, #76]	@ (8003ca4 <TIM_OC5_SetConfig+0xb4>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d003      	beq.n	8003c62 <TIM_OC5_SetConfig+0x72>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ca8 <TIM_OC5_SetConfig+0xb8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d109      	bne.n	8003c76 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	621a      	str	r2, [r3, #32]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40014000 	.word	0x40014000
 8003ca4:	40014400 	.word	0x40014400
 8003ca8:	40014800 	.word	0x40014800

08003cac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b087      	sub	sp, #28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	021b      	lsls	r3, r3, #8
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	051b      	lsls	r3, r3, #20
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <TIM_OC6_SetConfig+0xb0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <TIM_OC6_SetConfig+0x74>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC6_SetConfig+0xb4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d007      	beq.n	8003d20 <TIM_OC6_SetConfig+0x74>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a14      	ldr	r2, [pc, #80]	@ (8003d64 <TIM_OC6_SetConfig+0xb8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d003      	beq.n	8003d20 <TIM_OC6_SetConfig+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a13      	ldr	r2, [pc, #76]	@ (8003d68 <TIM_OC6_SetConfig+0xbc>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d109      	bne.n	8003d34 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	029b      	lsls	r3, r3, #10
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	621a      	str	r2, [r3, #32]
}
 8003d4e:	bf00      	nop
 8003d50:	371c      	adds	r7, #28
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 030a 	bic.w	r3, r3, #10
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b087      	sub	sp, #28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e054      	b.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a24      	ldr	r2, [pc, #144]	@ (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	@ (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00e      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f6c:	d009      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a13      	ldr	r2, [pc, #76]	@ (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d004      	beq.n	8003f82 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a11      	ldr	r2, [pc, #68]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d10c      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40014000 	.word	0x40014000

08003fc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e060      	b.n	80040a6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d115      	bne.n	8004094 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	051b      	lsls	r3, r3, #20
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e040      	b.n	800414c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fcb0 	bl	8000a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2224      	movs	r2, #36	@ 0x24
 80040e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f95e 	bl	80043c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f825 	bl	8004154 <UART_SetConfig>
 800410a:	4603      	mov	r3, r0
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e01b      	b.n	800414c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0201 	orr.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f9dd 	bl	8004504 <UART_CheckIdleState>
 800414a:	4603      	mov	r3, r0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800415c:	2300      	movs	r3, #0
 800415e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69db      	ldr	r3, [r3, #28]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	4b8a      	ldr	r3, [pc, #552]	@ (80043a8 <UART_SetConfig+0x254>)
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	6979      	ldr	r1, [r7, #20]
 8004188:	430b      	orrs	r3, r1
 800418a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a78      	ldr	r2, [pc, #480]	@ (80043ac <UART_SetConfig+0x258>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d120      	bne.n	8004212 <UART_SetConfig+0xbe>
 80041d0:	4b77      	ldr	r3, [pc, #476]	@ (80043b0 <UART_SetConfig+0x25c>)
 80041d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d817      	bhi.n	800420c <UART_SetConfig+0xb8>
 80041dc:	a201      	add	r2, pc, #4	@ (adr r2, 80041e4 <UART_SetConfig+0x90>)
 80041de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e2:	bf00      	nop
 80041e4:	080041f5 	.word	0x080041f5
 80041e8:	08004201 	.word	0x08004201
 80041ec:	08004207 	.word	0x08004207
 80041f0:	080041fb 	.word	0x080041fb
 80041f4:	2300      	movs	r3, #0
 80041f6:	77fb      	strb	r3, [r7, #31]
 80041f8:	e01d      	b.n	8004236 <UART_SetConfig+0xe2>
 80041fa:	2302      	movs	r3, #2
 80041fc:	77fb      	strb	r3, [r7, #31]
 80041fe:	e01a      	b.n	8004236 <UART_SetConfig+0xe2>
 8004200:	2304      	movs	r3, #4
 8004202:	77fb      	strb	r3, [r7, #31]
 8004204:	e017      	b.n	8004236 <UART_SetConfig+0xe2>
 8004206:	2308      	movs	r3, #8
 8004208:	77fb      	strb	r3, [r7, #31]
 800420a:	e014      	b.n	8004236 <UART_SetConfig+0xe2>
 800420c:	2310      	movs	r3, #16
 800420e:	77fb      	strb	r3, [r7, #31]
 8004210:	e011      	b.n	8004236 <UART_SetConfig+0xe2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a67      	ldr	r2, [pc, #412]	@ (80043b4 <UART_SetConfig+0x260>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d102      	bne.n	8004222 <UART_SetConfig+0xce>
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e009      	b.n	8004236 <UART_SetConfig+0xe2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a64      	ldr	r2, [pc, #400]	@ (80043b8 <UART_SetConfig+0x264>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d102      	bne.n	8004232 <UART_SetConfig+0xde>
 800422c:	2300      	movs	r3, #0
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e001      	b.n	8004236 <UART_SetConfig+0xe2>
 8004232:	2310      	movs	r3, #16
 8004234:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423e:	d15a      	bne.n	80042f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004240:	7ffb      	ldrb	r3, [r7, #31]
 8004242:	2b08      	cmp	r3, #8
 8004244:	d827      	bhi.n	8004296 <UART_SetConfig+0x142>
 8004246:	a201      	add	r2, pc, #4	@ (adr r2, 800424c <UART_SetConfig+0xf8>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	08004271 	.word	0x08004271
 8004250:	08004279 	.word	0x08004279
 8004254:	08004281 	.word	0x08004281
 8004258:	08004297 	.word	0x08004297
 800425c:	08004287 	.word	0x08004287
 8004260:	08004297 	.word	0x08004297
 8004264:	08004297 	.word	0x08004297
 8004268:	08004297 	.word	0x08004297
 800426c:	0800428f 	.word	0x0800428f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004270:	f7fe fb5e 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 8004274:	61b8      	str	r0, [r7, #24]
        break;
 8004276:	e013      	b.n	80042a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004278:	f7fe fb7c 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 800427c:	61b8      	str	r0, [r7, #24]
        break;
 800427e:	e00f      	b.n	80042a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004280:	4b4e      	ldr	r3, [pc, #312]	@ (80043bc <UART_SetConfig+0x268>)
 8004282:	61bb      	str	r3, [r7, #24]
        break;
 8004284:	e00c      	b.n	80042a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004286:	f7fe faf3 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 800428a:	61b8      	str	r0, [r7, #24]
        break;
 800428c:	e008      	b.n	80042a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004292:	61bb      	str	r3, [r7, #24]
        break;
 8004294:	e004      	b.n	80042a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	77bb      	strb	r3, [r7, #30]
        break;
 800429e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d074      	beq.n	8004390 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	005a      	lsls	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	441a      	add	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	2b0f      	cmp	r3, #15
 80042c0:	d916      	bls.n	80042f0 <UART_SetConfig+0x19c>
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c8:	d212      	bcs.n	80042f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f023 030f 	bic.w	r3, r3, #15
 80042d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	b29b      	uxth	r3, r3
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	b29a      	uxth	r2, r3
 80042e0:	89fb      	ldrh	r3, [r7, #14]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	89fa      	ldrh	r2, [r7, #14]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	e04f      	b.n	8004390 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77bb      	strb	r3, [r7, #30]
 80042f4:	e04c      	b.n	8004390 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d828      	bhi.n	800434e <UART_SetConfig+0x1fa>
 80042fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004304 <UART_SetConfig+0x1b0>)
 80042fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004302:	bf00      	nop
 8004304:	08004329 	.word	0x08004329
 8004308:	08004331 	.word	0x08004331
 800430c:	08004339 	.word	0x08004339
 8004310:	0800434f 	.word	0x0800434f
 8004314:	0800433f 	.word	0x0800433f
 8004318:	0800434f 	.word	0x0800434f
 800431c:	0800434f 	.word	0x0800434f
 8004320:	0800434f 	.word	0x0800434f
 8004324:	08004347 	.word	0x08004347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004328:	f7fe fb02 	bl	8002930 <HAL_RCC_GetPCLK1Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e013      	b.n	8004358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004330:	f7fe fb20 	bl	8002974 <HAL_RCC_GetPCLK2Freq>
 8004334:	61b8      	str	r0, [r7, #24]
        break;
 8004336:	e00f      	b.n	8004358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004338:	4b20      	ldr	r3, [pc, #128]	@ (80043bc <UART_SetConfig+0x268>)
 800433a:	61bb      	str	r3, [r7, #24]
        break;
 800433c:	e00c      	b.n	8004358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800433e:	f7fe fa97 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8004342:	61b8      	str	r0, [r7, #24]
        break;
 8004344:	e008      	b.n	8004358 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800434a:	61bb      	str	r3, [r7, #24]
        break;
 800434c:	e004      	b.n	8004358 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800434e:	2300      	movs	r3, #0
 8004350:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	77bb      	strb	r3, [r7, #30]
        break;
 8004356:	bf00      	nop
    }

    if (pclk != 0U)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085a      	lsrs	r2, r3, #1
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	441a      	add	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b0f      	cmp	r3, #15
 8004376:	d909      	bls.n	800438c <UART_SetConfig+0x238>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437e:	d205      	bcs.n	800438c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	e001      	b.n	8004390 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800439c:	7fbb      	ldrb	r3, [r7, #30]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	efff69f3 	.word	0xefff69f3
 80043ac:	40013800 	.word	0x40013800
 80043b0:	40021000 	.word	0x40021000
 80043b4:	40004400 	.word	0x40004400
 80043b8:	40004800 	.word	0x40004800
 80043bc:	007a1200 	.word	0x007a1200

080043c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d01a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044be:	d10a      	bne.n	80044d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b098      	sub	sp, #96	@ 0x60
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004514:	f7fc fba8 	bl	8000c68 <HAL_GetTick>
 8004518:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b08      	cmp	r3, #8
 8004526:	d12e      	bne.n	8004586 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004528:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f88c 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d021      	beq.n	8004586 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004556:	653b      	str	r3, [r7, #80]	@ 0x50
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	461a      	mov	r2, r3
 800455e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004560:	647b      	str	r3, [r7, #68]	@ 0x44
 8004562:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e6      	bne.n	8004542 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e062      	b.n	800464c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b04      	cmp	r3, #4
 8004592:	d149      	bne.n	8004628 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800459c:	2200      	movs	r2, #0
 800459e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f856 	bl	8004654 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d03c      	beq.n	8004628 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	623b      	str	r3, [r7, #32]
   return(result);
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e6      	bne.n	80045ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3308      	adds	r3, #8
 80045e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	e853 3f00 	ldrex	r3, [r3]
 80045ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	3308      	adds	r3, #8
 80045fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004600:	61fa      	str	r2, [r7, #28]
 8004602:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004604:	69b9      	ldr	r1, [r7, #24]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	e841 2300 	strex	r3, r2, [r1]
 800460c:	617b      	str	r3, [r7, #20]
   return(result);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1e5      	bne.n	80045e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e011      	b.n	800464c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3758      	adds	r7, #88	@ 0x58
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	603b      	str	r3, [r7, #0]
 8004660:	4613      	mov	r3, r2
 8004662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004664:	e04f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800466c:	d04b      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fc fafb 	bl	8000c68 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <UART_WaitOnFlagUntilTimeout+0x30>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e04e      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d037      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d034      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d031      	beq.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d110      	bne.n	80046d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2208      	movs	r2, #8
 80046b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f838 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2208      	movs	r2, #8
 80046c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e029      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046e0:	d111      	bne.n	8004706 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f81e 	bl	800472e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e00f      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4013      	ands	r3, r2
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	429a      	cmp	r2, r3
 8004714:	bf0c      	ite	eq
 8004716:	2301      	moveq	r3, #1
 8004718:	2300      	movne	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	461a      	mov	r2, r3
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	429a      	cmp	r2, r3
 8004722:	d0a0      	beq.n	8004666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800472e:	b480      	push	{r7}
 8004730:	b095      	sub	sp, #84	@ 0x54
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800474a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004754:	643b      	str	r3, [r7, #64]	@ 0x40
 8004756:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800475a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	61fb      	str	r3, [r7, #28]
   return(result);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004788:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800478a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800478e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d118      	bne.n	80047d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	461a      	mov	r2, r3
 80047c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c6:	6979      	ldr	r1, [r7, #20]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	613b      	str	r3, [r7, #16]
   return(result);
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e6      	bne.n	80047a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80047ea:	bf00      	nop
 80047ec:	3754      	adds	r7, #84	@ 0x54
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <memset>:
 80047f6:	4402      	add	r2, r0
 80047f8:	4603      	mov	r3, r0
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d100      	bne.n	8004800 <memset+0xa>
 80047fe:	4770      	bx	lr
 8004800:	f803 1b01 	strb.w	r1, [r3], #1
 8004804:	e7f9      	b.n	80047fa <memset+0x4>
	...

08004808 <__libc_init_array>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4d0d      	ldr	r5, [pc, #52]	@ (8004840 <__libc_init_array+0x38>)
 800480c:	4c0d      	ldr	r4, [pc, #52]	@ (8004844 <__libc_init_array+0x3c>)
 800480e:	1b64      	subs	r4, r4, r5
 8004810:	10a4      	asrs	r4, r4, #2
 8004812:	2600      	movs	r6, #0
 8004814:	42a6      	cmp	r6, r4
 8004816:	d109      	bne.n	800482c <__libc_init_array+0x24>
 8004818:	4d0b      	ldr	r5, [pc, #44]	@ (8004848 <__libc_init_array+0x40>)
 800481a:	4c0c      	ldr	r4, [pc, #48]	@ (800484c <__libc_init_array+0x44>)
 800481c:	f000 f818 	bl	8004850 <_init>
 8004820:	1b64      	subs	r4, r4, r5
 8004822:	10a4      	asrs	r4, r4, #2
 8004824:	2600      	movs	r6, #0
 8004826:	42a6      	cmp	r6, r4
 8004828:	d105      	bne.n	8004836 <__libc_init_array+0x2e>
 800482a:	bd70      	pop	{r4, r5, r6, pc}
 800482c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004830:	4798      	blx	r3
 8004832:	3601      	adds	r6, #1
 8004834:	e7ee      	b.n	8004814 <__libc_init_array+0xc>
 8004836:	f855 3b04 	ldr.w	r3, [r5], #4
 800483a:	4798      	blx	r3
 800483c:	3601      	adds	r6, #1
 800483e:	e7f2      	b.n	8004826 <__libc_init_array+0x1e>
 8004840:	080048a0 	.word	0x080048a0
 8004844:	080048a0 	.word	0x080048a0
 8004848:	080048a0 	.word	0x080048a0
 800484c:	080048a4 	.word	0x080048a4

08004850 <_init>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	bf00      	nop
 8004854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004856:	bc08      	pop	{r3}
 8004858:	469e      	mov	lr, r3
 800485a:	4770      	bx	lr

0800485c <_fini>:
 800485c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485e:	bf00      	nop
 8004860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004862:	bc08      	pop	{r3}
 8004864:	469e      	mov	lr, r3
 8004866:	4770      	bx	lr
